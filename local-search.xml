<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Eureka和Nacos注册中心入门案例以及Ribbon负载均衡</title>
    <link href="/2022/10/22/Eureka%E5%92%8CNacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B%E4%BB%A5%E5%8F%8ARibbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <url>/2022/10/22/Eureka%E5%92%8CNacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B%E4%BB%A5%E5%8F%8ARibbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Eureka注册中心"><a href="#一、Eureka注册中心" class="headerlink" title="一、Eureka注册中心"></a>一、Eureka注册中心</h2><p><strong>项目结构：</strong></p><blockquote><p>cloud-demo：父工程，管理依赖</p><p>order-service：订单微服务，负责订单相关业务</p><p>user-service：用户微服务，负责用户相关业务</p><p>eureka-server：注册中心服务端</p></blockquote><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021221226767.png" alt="image-20221021221226767"></p><p><strong>项目接口：</strong></p><blockquote><p><a href="http://localhost:8080/order/101">http://localhost:8080/order/101</a>  根据订单id查询订单 （订单中包含用户id）</p><p><a href="http://localhost:8081/user/1">http://localhost:8081/user/1</a>  根据用户id查询用户</p></blockquote><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021221314766.png" alt="image-20221021221314766"></p><p><strong>Eureka的作用：</strong></p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20210713220104956.png" alt="image-20210713220104956"></p><h3 id="1、搭建注册中心服务端：eureka-server（这必须是一个独立的微服务）"><a href="#1、搭建注册中心服务端：eureka-server（这必须是一个独立的微服务）" class="headerlink" title="1、搭建注册中心服务端：eureka-server（这必须是一个独立的微服务）"></a>1、搭建注册中心服务端：eureka-server（这必须是一个独立的微服务）</h3><h4 id="1-1-创建子模块，引入SpringCloud为eureka提供的starter依赖"><a href="#1-1-创建子模块，引入SpringCloud为eureka提供的starter依赖" class="headerlink" title="1.1 创建子模块，引入SpringCloud为eureka提供的starter依赖"></a>1.1 创建子模块，引入SpringCloud为eureka提供的starter依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-2-编写启动类，添加-EnableEurekaServer注解，开启eureka的注册中心功能"><a href="#1-2-编写启动类，添加-EnableEurekaServer注解，开启eureka的注册中心功能" class="headerlink" title="1.2 编写启动类，添加@EnableEurekaServer注解，开启eureka的注册中心功能"></a>1.2 编写启动类，添加@EnableEurekaServer注解，开启eureka的注册中心功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaServer</span> <span class="hljs-comment">//开启eureka的注册中心功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EurekaApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EurekaApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-3-编写配置文件-application-yml"><a href="#1-3-编写配置文件-application-yml" class="headerlink" title="1.3 编写配置文件 application.yml"></a>1.3 编写配置文件 application.yml</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">10086</span> <span class="hljs-comment">#端口</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-server</span>  <span class="hljs-comment">#服务名称</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span> <br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:10086/eureka</span>  <span class="hljs-comment"># 注册中心地址</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li>不加 eureka.client.service-url-defaultZone 配置：启动时会寻找注册中心（用默认端口）</li><li>加上 eureka.client.service-url-defaultZone 配置：启动时会寻找注册中心（10086端口）</li><li>fetch-registry: false #关闭作为客户端时从eureka server获取服务信息</li><li>register-with-eureka: false #不再将自己同时作为客户端进行注册（作为一个纯的eureka server，关闭eureka client）</li></ul></blockquote><p>启动微服务，然后在浏览器访问：<a href="http://127.0.0.1:10086/">http://127.0.0.1:10086</a></p><p>出现此界面代表成功：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021220928061.png" alt="image-20221021220928061"></p><h3 id="2、服务注册-（服务提供者-user-service）"><a href="#2、服务注册-（服务提供者-user-service）" class="headerlink" title="2、服务注册 （服务提供者  user-service）"></a>2、服务注册 （服务提供者  user-service）</h3><h4 id="2-1-将user-service注册到eureka-server"><a href="#2-1-将user-service注册到eureka-server" class="headerlink" title="2.1 将user-service注册到eureka-server"></a>2.1 将user-service注册到eureka-server</h4><h5 id="2-1-1-引入依赖"><a href="#2-1-1-引入依赖" class="headerlink" title="2.1.1 引入依赖"></a>2.1.1 引入依赖</h5><p><strong>user-service</strong>的pom文件中，引入下面的<strong>eureka-client</strong>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-1-2-配置文件"><a href="#2-1-2-配置文件" class="headerlink" title="2.1.2 配置文件"></a>2.1.2 配置文件</h5><p>在<strong>user-service</strong>中，修改application.yml文件，添加服务名称、eureka地址：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">userservice</span>  <span class="hljs-comment">#服务名称</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:10086/eureka</span>  <span class="hljs-comment"># 注册中心地址</span><br></code></pre></td></tr></table></figure><h4 id="2-2-启动多个user-service实例"><a href="#2-2-启动多个user-service实例" class="headerlink" title="2.2 启动多个user-service实例"></a>2.2 启动多个user-service实例</h4><p>copy user-service 实例，并在配置窗口中设置新的端口号：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021222119065.png" alt="image-20221021222119065"></p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021222001835.png" alt="image-20221021222001835"></p><h4 id="2-3-查看eureka-server管理页面："><a href="#2-3-查看eureka-server管理页面：" class="headerlink" title="2.3 查看eureka-server管理页面："></a>2.3 查看eureka-server管理页面：</h4><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021222213297.png" alt="image-20221021222213297"></p><h3 id="3、服务发现（服务消费者-order-service）"><a href="#3、服务发现（服务消费者-order-service）" class="headerlink" title="3、服务发现（服务消费者 order-service）"></a>3、服务发现（服务消费者 order-service）</h3><h4 id="3-1-向eureka-server拉取user-service的信息"><a href="#3-1-向eureka-server拉取user-service的信息" class="headerlink" title="3.1 向eureka-server拉取user-service的信息"></a>3.1 向eureka-server拉取user-service的信息</h4><h5 id="3-1-1-引入依赖"><a href="#3-1-1-引入依赖" class="headerlink" title="3.1.1 引入依赖"></a>3.1.1 引入依赖</h5><p>在<strong>order-service</strong>的pom文件中，引入下面的eureka-client依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3-1-2-配置文件"><a href="#3-1-2-配置文件" class="headerlink" title="3.1.2 配置文件"></a>3.1.2 配置文件</h5><p>在<strong>order-service</strong>中，修改application.yml文件，添加服务名称、eureka地址：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">orderservice</span> <span class="hljs-comment"># 服务名称</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:10086/eureka</span> <span class="hljs-comment">#注册中心地址</span><br></code></pre></td></tr></table></figure><h4 id="3-2-服务拉取-和-负载均衡"><a href="#3-2-服务拉取-和-负载均衡" class="headerlink" title="3.2 服务拉取 和 负载均衡"></a>3.2 服务拉取 和 负载均衡</h4><h5 id="3-2-1-在order-service的OrderApplication中，给RestTemplate这个Bean添加一个-LoadBalanced注解"><a href="#3-2-1-在order-service的OrderApplication中，给RestTemplate这个Bean添加一个-LoadBalanced注解" class="headerlink" title="3.2.1 在order-service的OrderApplication中，给RestTemplate这个Bean添加一个@LoadBalanced注解"></a>3.2.1 在order-service的OrderApplication中，给RestTemplate这个Bean添加一个@LoadBalanced注解</h5><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021223351489.png" alt="image-20221021223351489"></p><h5 id="3-2-2-修改order-service服务中service层代码"><a href="#3-2-2-修改order-service服务中service层代码" class="headerlink" title="3.2.2 修改order-service服务中service层代码"></a>3.2.2 修改order-service服务中service层代码</h5><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021223718020.png" alt="image-20221021223718020"></p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021223908400.png" alt="image-20221021223908400"></p><p>spring会自动帮助我们从eureka-server端，根据userservice这个服务名称，获取实例列表，然后完成负载均衡（默认是轮询）。</p><hr><h2 id="二、Ribbon负载均衡"><a href="#二、Ribbon负载均衡" class="headerlink" title="二、Ribbon负载均衡"></a>二、Ribbon负载均衡</h2><h3 id="1、负载均衡原理"><a href="#1、负载均衡原理" class="headerlink" title="1、负载均衡原理"></a>1、负载均衡原理</h3><p>SpringCloud底层其实是利用了一个名为Ribbon的组件，来实现负载均衡功能的。</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021225359181.png" alt="image-20221021225359181"></p><p>那么我们发出的请求明明是<a href="http://userservice/user/1%EF%BC%8C%E6%80%8E%E4%B9%88%E5%8F%98%E6%88%90%E4%BA%86http://localhost:8081%E7%9A%84%E5%91%A2%EF%BC%9F">http://userservice/user/1，怎么变成了http://localhost:8081的呢？</a></p><h3 id="2、源码跟踪"><a href="#2、源码跟踪" class="headerlink" title="2、源码跟踪"></a>2、源码跟踪</h3><p>为什么我们只输入了service名称就可以访问了呢？之前还要获取ip和端口。</p><p>显然有人帮我们根据service名称，获取到了服务实例的ip和端口。它就是<code>LoadBalancerInterceptor</code>，这个类会在对RestTemplate的请求进行拦截，然后从Eureka根据服务id获取服务列表，随后利用负载均衡算法得到真实的服务地址信息，替换服务id。</p><p>我们进行源码跟踪：</p><h4 id="1）LoadBalancerIntercepor"><a href="#1）LoadBalancerIntercepor" class="headerlink" title="1）LoadBalancerIntercepor"></a>1）LoadBalancerIntercepor</h4><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021225505404.png" alt="image-20221021225505404"></p><p>可以看到这里的intercept方法，拦截了用户的HttpRequest请求，然后做了几件事：</p><ul><li><code>request.getURI()</code>：获取请求uri，本例中就是 <a href="http://user-service/user/8">http://user-service/user/8</a></li><li><code>originalUri.getHost()</code>：获取uri路径的主机名，其实就是服务id，<code>user-service</code></li><li><code>this.loadBalancer.execute()</code>：处理服务id，和用户请求。</li></ul><p>这里的<code>this.loadBalancer</code>是<code>LoadBalancerClient</code>类型，我们继续跟入。</p><h4 id="2）LoadBalancerClient"><a href="#2）LoadBalancerClient" class="headerlink" title="2）LoadBalancerClient"></a>2）LoadBalancerClient</h4><p>继续跟入execute方法：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021225552556.png" alt="image-20221021225552556"></p><p>代码是这样的：</p><ul><li>getLoadBalancer(serviceId)：根据服务id获取ILoadBalancer，而ILoadBalancer会拿着服务id去eureka中获取服务列表并保存起来。</li><li>getServer(loadBalancer)：利用内置的负载均衡算法，从服务列表中选择一个。本例中，可以看到获取了8082端口的服务</li></ul><p>放行后，再次访问并跟踪，发现获取的是8081：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021225611257.png" alt="image-20221021225611257"></p><p>果然实现了负载均衡。</p><h4 id="3）负载均衡策略IRule"><a href="#3）负载均衡策略IRule" class="headerlink" title="3）负载均衡策略IRule"></a>3）负载均衡策略IRule</h4><p>在刚才的代码中，可以看到获取服务使通过一个<code>getServer</code>方法来做负载均衡:</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021225629181.png" alt="image-20221021225629181"></p><p>我们继续跟入：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021225717085.png" alt="image-20221021225717085"></p><p>继续跟踪源码chooseServer方法，发现这么一段代码：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021225729714.png" alt="image-20221021225729714"></p><p>我们看看这个rule是谁：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021225747262.png" alt="image-20221021225747262"></p><p>这里的rule默认值是一个<code>RoundRobinRule</code>，看类的介绍：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021225806141.png" alt="image-20221021225806141"></p><p>这不就是轮询的意思嘛。</p><p>到这里，整个负载均衡的流程我们就清楚了。</p><h4 id="4）总结"><a href="#4）总结" class="headerlink" title="4）总结"></a>4）总结</h4><p>SpringCloudRibbon的底层采用了一个拦截器，拦截了RestTemplate发出的请求，对地址做了修改。用一幅图来总结一下：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021225829674.png" alt="image-20221021225829674"></p><p>基本流程如下：</p><ol><li>拦截我们的RestTemplate请求<a href="http://userservice/user/1">http://userservice/user/1</a></li><li>RibbonLoadBalancerClient会从请求url中获取服务名称，也就是user-service</li><li>DynamicServerListLoadBalancer根据user-service到eureka拉取服务列表</li><li>eureka返回列表，localhost:8081、localhost:8082</li><li>IRule利用内置负载均衡规则，从列表中选择一个，例如localhost:8081</li><li>RibbonLoadBalancerClient修改请求地址，用localhost:8081替代userservice，得到<a href="http://localhost:8081/user/1%EF%BC%8C%E5%8F%91%E8%B5%B7%E7%9C%9F%E5%AE%9E%E8%AF%B7%E6%B1%82">http://localhost:8081/user/1，发起真实请求</a></li></ol><h3 id="3、负载均衡策略"><a href="#3、负载均衡策略" class="headerlink" title="3、负载均衡策略"></a>3、负载均衡策略</h3><h4 id="3-1-负载均衡策略"><a href="#3-1-负载均衡策略" class="headerlink" title="3.1 负载均衡策略"></a>3.1 负载均衡策略</h4><p>负载均衡的规则都定义在IRule接口中，而IRule有很多不同的实现类：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021225850324.png" alt="image-20221021225850324"></p><p>不同规则的含义如下：</p><table><thead><tr><th><strong>内置负载均衡规则类</strong></th><th><strong>规则描述</strong></th></tr></thead><tbody><tr><td>RoundRobinRule</td><td>简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。</td></tr><tr><td>AvailabilityFilteringRule</td><td>对以下两种服务器进行忽略：   （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。  （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的<clientName>.<clientConfigNameSpace>.ActiveConnectionsLimit属性进行配置。</td></tr><tr><td>WeightedResponseTimeRule</td><td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td></tr><tr><td><strong>ZoneAvoidanceRule</strong></td><td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。</td></tr><tr><td>BestAvailableRule</td><td>忽略那些短路的服务器，并选择并发数较低的服务器。</td></tr><tr><td>RandomRule</td><td>随机选择一个可用的服务器。</td></tr><tr><td>RetryRule</td><td>重试机制的选择逻辑</td></tr></tbody></table><p>默认的实现就是ZoneAvoidanceRule，是一种轮询方案</p><h4 id="3-2-自定义负载均衡策略"><a href="#3-2-自定义负载均衡策略" class="headerlink" title="3.2 自定义负载均衡策略"></a>3.2 自定义负载均衡策略</h4><p>通过定义IRule实现可以修改负载均衡规则，有两种方式（<strong>用一种方法实现</strong>）：</p><p>方法一：代码方式：在<strong>order-service</strong>中的OrderApplication类中，定义一个新的IRule：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> IRule <span class="hljs-title function_">randomRule</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomRule</span>();  <span class="hljs-comment">//RandomRule是随机规则</span><br>&#125;<br></code></pre></td></tr></table></figure><p>方法二：配置文件方式：在<strong>order-service</strong>的application.yml文件中，添加新的配置也可以修改规则：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">userservice:</span> <span class="hljs-comment"># 给某个微服务配置负载均衡规则，这里是userservice服务</span><br>  <span class="hljs-attr">ribbon:</span><br>    <span class="hljs-attr">NFLoadBalancerRuleClassName:</span> <span class="hljs-string">com.netflix.loadbalancer.RandomRule</span> <span class="hljs-comment"># 负载均衡规则 </span><br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>，一般用默认的负载均衡规则，不做修改。</p></blockquote><h3 id="4、饥饿加载"><a href="#4、饥饿加载" class="headerlink" title="4、饥饿加载"></a>4、饥饿加载</h3><p>Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。</p><p>而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">ribbon:</span><br>  <span class="hljs-attr">eager-load:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">clients:</span> <span class="hljs-string">userservice</span><br></code></pre></td></tr></table></figure><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021230334612.png" alt="image-20221021230334612"></p><hr><h2 id="三、Nacos注册中心"><a href="#三、Nacos注册中心" class="headerlink" title="三、Nacos注册中心"></a>三、Nacos注册中心</h2><h3 id="1、Nacos的使用"><a href="#1、Nacos的使用" class="headerlink" title="1、Nacos的使用"></a>1、Nacos的使用</h3><h4 id="1-1-Nacos安装"><a href="#1-1-Nacos安装" class="headerlink" title="1.1 Nacos安装"></a>1.1 Nacos安装</h4><p>在Nacos的GitHub页面，提供有下载链接，可以下载编译好的Nacos服务端或者源代码：</p><p>GitHub主页：<a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a></p><p>GitHub的Release下载页：<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><p>如图：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021231456818.png" alt="image-20221021231456818"></p><h5 id="1-1-1-解压"><a href="#1-1-1-解压" class="headerlink" title="1.1.1 解压"></a>1.1.1 解压</h5><p>将包解压到任意非中文目录下，如图：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021231527149.png" alt="image-20221021231527149"></p><blockquote><p>目录说明：</p><ul><li>bin：启动脚本</li><li>conf：配置文件</li></ul></blockquote><h5 id="1-1-2-端口配置"><a href="#1-1-2-端口配置" class="headerlink" title="1.1.2 端口配置"></a>1.1.2 端口配置</h5><p>Nacos的默认端口是8848，如果你电脑上的其它进程占用了8848端口，请先尝试关闭该进程。</p><p><strong>如果无法关闭占用8848端口的进程</strong>，也可以进入nacos的conf目录，修改配置文件中的端口：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021231615320.png" alt="image-20221021231615320"></p><p>修改其中的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">server.port=<span class="hljs-number">8848</span>  #端口可以自定义<br>nacos.inetutils.ip-address=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>  #此ip一定要指定,防止本机有多ip时,自动使用到其它ip<br></code></pre></td></tr></table></figure><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021231712172.png" alt="image-20221021231712172"></p><h5 id="1-1-3-启动"><a href="#1-1-3-启动" class="headerlink" title="1.1.3 启动"></a>1.1.3 启动</h5><p>进入bin目录，结构如下：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021231742115.png" alt="image-20221021231742115"></p><ul><li><p>在cmd中执行命令：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">startup.<span class="hljs-built_in">cmd</span> -m standalone<br></code></pre></td></tr></table></figure></li></ul><p>执行后的效果如图：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021231812043.png" alt="image-20221021231812043"></p><h5 id="1-1-4-访问"><a href="#1-1-4-访问" class="headerlink" title="1.1.4 访问"></a>1.1.4 访问</h5><p>在浏览器输入地址：<a href="http://127.0.0.1:8848/nacos%E5%8D%B3%E5%8F%AF%E8%AE%BF%E9%97%AE%E3%80%82">http://127.0.0.1:8848/nacos即可访问。</a></p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021231858906.png" alt="image-20221021231858906"></p><p>默认的账号和密码都是nacos，进入后：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021231910229.png" alt="image-20221021231910229"></p><h4 id="1-2、引入依赖"><a href="#1-2、引入依赖" class="headerlink" title="1.2、引入依赖"></a>1.2、引入依赖</h4><p>在<strong>cloud-demo</strong>父工程的pom文件中的<code>&lt;dependencyManagement&gt;</code>中引入SpringCloudAlibaba的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后在<strong>user-service</strong>和<strong>order-service</strong>中的pom文件中引入nacos-discovery依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-3、配置nacos地址"><a href="#1-3、配置nacos地址" class="headerlink" title="1.3、配置nacos地址"></a>1.3、配置nacos地址</h4><p>在<strong>user-service</strong>和<strong>order-service</strong>的application.yml中添加nacos地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br></code></pre></td></tr></table></figure><h4 id="1-4、重启测试"><a href="#1-4、重启测试" class="headerlink" title="1.4、重启测试"></a>1.4、重启测试</h4><p>重启微服务后，登录nacos管理页面，可以看到微服务信息：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021232154339.png" alt="image-20221021232154339"></p><h3 id="2、服务分级存储模型（集群）"><a href="#2、服务分级存储模型（集群）" class="headerlink" title="2、服务分级存储模型（集群）"></a>2、服务分级存储模型（集群）</h3><p>一个<strong>服务</strong>可以有多个<strong>实例</strong>，例如我们的user-service，可以有:</p><ul><li>127.0.0.1:8081</li><li>127.0.0.1:8082</li><li>127.0.0.1:8083</li></ul><p>假如这些实例分布于全国各地的不同机房，例如：</p><ul><li>127.0.0.1:8081，在上海机房</li><li>127.0.0.1:8082，在上海机房</li><li>127.0.0.1:8083，在杭州机房</li></ul><p>Nacos就将同一机房内的实例 划分为一个<strong>集群</strong>。</p><p>也就是说，user-service是服务，一个服务可以包含多个集群，如杭州、上海，每个集群下可以有多个实例，形成分级模型，如图：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021232836465.png" alt="image-20221021232836465"></p><p>微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。例如：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021232851308.png" alt="image-20221021232851308"></p><p>杭州机房内的order-service应该优先访问同机房的user-service。</p><h3 id="3、给user-service配置集群"><a href="#3、给user-service配置集群" class="headerlink" title="3、给user-service配置集群"></a>3、给user-service配置集群</h3><p>修改<strong>user-service</strong>的application.yml文件，添加集群配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">cluster-name:</span> <span class="hljs-string">HZ</span> <span class="hljs-comment"># 集群名称</span><br></code></pre></td></tr></table></figure><p>重启两个user-service实例后，我们可以在nacos控制台看到下面结果：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021233052269.png" alt="image-20221021233052269"></p><p>我们再次复制一个user-service启动配置，添加属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">-Dserver.port=8083 -Dspring.cloud.nacos.discovery.cluster-name=SH<br></code></pre></td></tr></table></figure><p>配置如图所示：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021233147735.png" alt="image-20221021233147735"></p><p>启动UserApplication3后再次查看nacos控制台：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021233215602.png" alt="image-20221021233215602"></p><h3 id="4、配置同集群优先的负载均衡"><a href="#4、配置同集群优先的负载均衡" class="headerlink" title="4、配置同集群优先的负载均衡"></a>4、配置同集群优先的负载均衡</h3><p>默认的<code>ZoneAvoidanceRule</code>并不能实现根据同集群优先来实现负载均衡。</p><p>因此Nacos中提供了一个<code>NacosRule</code>的实现，可以优先从同集群中挑选实例。</p><h4 id="1）给order-service配置集群信息"><a href="#1）给order-service配置集群信息" class="headerlink" title="1）给order-service配置集群信息"></a>1）给order-service配置集群信息</h4><p>修改<strong>order-service</strong>的application.yml文件，添加集群配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">cluster-name:</span> <span class="hljs-string">HZ</span> <span class="hljs-comment"># 集群名称</span><br></code></pre></td></tr></table></figure><h4 id="2）修改负载均衡规则"><a href="#2）修改负载均衡规则" class="headerlink" title="2）修改负载均衡规则"></a>2）修改负载均衡规则</h4><p>修改<strong>order-service</strong>的application.yml文件，修改负载均衡规则：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">userservice:</span><br>  <span class="hljs-attr">ribbon:</span><br>    <span class="hljs-attr">NFLoadBalancerRuleClassName:</span> <span class="hljs-string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="hljs-comment"># 负载均衡规则 </span><br></code></pre></td></tr></table></figure><h3 id="5、权重配置"><a href="#5、权重配置" class="headerlink" title="5、权重配置"></a>5、权重配置</h3><p>实际部署中会出现这样的场景：</p><p>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。</p><p>但默认情况下NacosRule是同集群内随机挑选，不会考虑机器的性能问题。</p><p>因此，Nacos提供了权重配置来控制访问频率，权重越大则访问频率越高。</p><p>在nacos控制台，找到user-service的实例列表，点击编辑，即可修改权重：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021233441519.png" alt="image-20221021233441519"></p><p>在弹出的编辑窗口，修改权重：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021233451828.png" alt="image-20221021233451828"></p><blockquote><p><strong>注意</strong>：如果权重修改为0，则该实例永远不会被访问</p></blockquote><h3 id="6、环境隔离"><a href="#6、环境隔离" class="headerlink" title="6、环境隔离"></a>6、环境隔离</h3><p>Nacos提供了namespace来实现环境隔离功能。</p><ol><li>nacos中可以有多个namespace</li><li>namespace下可以有group、service等</li><li>不同namespace之间相互隔离，例如不同namespace的服务互相不可见</li></ol><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021233531629.png" alt="image-20221021233531629"></p><h4 id="6-1-创建命名空间（namespace）"><a href="#6-1-创建命名空间（namespace）" class="headerlink" title="6.1 创建命名空间（namespace）"></a>6.1 创建命名空间（namespace）</h4><p>默认情况下，所有service、data、group都在同一个namespace，名为public：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021233610132.png" alt="image-20221021233610132"></p><p>我们可以点击页面新增按钮，添加一个namespace：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021233620545.png" alt="image-20221021233620545"></p><p>然后，填写表单：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021233630770.png" alt="image-20221021233630770"></p><p>就能在页面看到一个新的namespace：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021233641304.png" alt="image-20221021233641304"></p><h4 id="6-2-给微服务配置namespace"><a href="#6-2-给微服务配置namespace" class="headerlink" title="6.2 给微服务配置namespace"></a>6.2 给微服务配置namespace</h4><p>给微服务配置namespace只能通过修改配置来实现。</p><p>修改<strong>order-service</strong>的application.yml文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">cluster-name:</span> <span class="hljs-string">HZ</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">492a7d5d-237b-46a1-a99a-fa8e98e4b0f9</span> <span class="hljs-comment"># 命名空间，填ID</span><br></code></pre></td></tr></table></figure><p>重启order-service后，访问控制台，可以看到下面的结果：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021233740242.png" alt="image-20221021233740242"></p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021233758403.png" alt="image-20221021233758403"></p><p>此时访问order-service，因为namespace不同，会导致找不到userservice，控制台会报错：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021233818353.png" alt="image-20221021233818353"></p><hr><h2 id="四、Nacos与Eureka的区别"><a href="#四、Nacos与Eureka的区别" class="headerlink" title="四、Nacos与Eureka的区别"></a>四、Nacos与Eureka的区别</h2><p>Nacos的服务实例分为两种l类型：</p><ul><li><p>临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型。</p></li><li><p>非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。</p></li></ul><p>配置一个服务实例为永久实例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">ephemeral:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 设置为非临时实例</span><br></code></pre></td></tr></table></figure><p>Nacos和Eureka整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221021233858415.png" alt="image-20221021233858415"></p><ul><li><p>Nacos与eureka的共同点</p><ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul></li><li><p>Nacos与Eureka的区别</p><ol><li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li><li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>注册中心组件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原子操作类AtomicInteger</title>
    <link href="/2022/10/21/%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E7%B1%BBAtomicInteger/"/>
    <url>/2022/10/21/%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E7%B1%BBAtomicInteger/</url>
    
    <content type="html"><![CDATA[<h2 id="原子操作类AtomicInteger"><a href="#原子操作类AtomicInteger" class="headerlink" title="原子操作类AtomicInteger"></a>原子操作类AtomicInteger</h2><p>AtomicInteger是一个提供原子操作的Integer类，通过线程安全的方式操作加减。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生成雪花算法id（com.baomidou.mybatisplus）</title>
    <link href="/2022/10/21/%E7%94%9F%E6%88%90%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95id%EF%BC%88com.baomidou.mybatisplus%EF%BC%89/"/>
    <url>/2022/10/21/%E7%94%9F%E6%88%90%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95id%EF%BC%88com.baomidou.mybatisplus%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="生成雪花算法id（com-baomidou-mybatisplus）"><a href="#生成雪花算法id（com-baomidou-mybatisplus）" class="headerlink" title="生成雪花算法id（com.baomidou.mybatisplus）"></a>生成雪花算法id（com.baomidou.mybatisplus）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.IdWorker;<br><br><span class="hljs-type">long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> IdWorker.getId();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网页发起请求达到后端直到响应（简易流程图）</title>
    <link href="/2022/10/21/%E7%BD%91%E9%A1%B5%E5%8F%91%E8%B5%B7%E8%AF%B7%E6%B1%82%E8%BE%BE%E5%88%B0%E5%90%8E%E7%AB%AF%E7%9B%B4%E5%88%B0%E5%93%8D%E5%BA%94%E7%9A%84%E6%B5%81%E7%A8%8B%E5%9B%BE/"/>
    <url>/2022/10/21/%E7%BD%91%E9%A1%B5%E5%8F%91%E8%B5%B7%E8%AF%B7%E6%B1%82%E8%BE%BE%E5%88%B0%E5%90%8E%E7%AB%AF%E7%9B%B4%E5%88%B0%E5%93%8D%E5%BA%94%E7%9A%84%E6%B5%81%E7%A8%8B%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="网页发起请求达到后端直到响应的过程"><a href="#网页发起请求达到后端直到响应的过程" class="headerlink" title="网页发起请求达到后端直到响应的过程"></a>网页发起请求达到后端直到响应的过程</h2><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202209271851308.png" alt="image-20220927185123123"></p>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tag</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作两张表以上需要开启事务控制</title>
    <link href="/2022/10/21/%E6%93%8D%E4%BD%9C%E4%B8%A4%E5%BC%A0%E8%A1%A8%E5%8F%8A%E4%BB%A5%E4%B8%8A%EF%BC%8C%E4%B8%BA%E4%BA%86%E4%BF%9D%E8%AF%81%E6%95%B0%E6%8D%AE%E5%8E%9F%E5%AD%90%E6%80%A7%E5%92%8C%E5%94%AF%E4%B8%80%E6%80%A7%EF%BC%8C%E9%9C%80%E8%A6%81%E5%BC%80%E5%90%AF%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6/"/>
    <url>/2022/10/21/%E6%93%8D%E4%BD%9C%E4%B8%A4%E5%BC%A0%E8%A1%A8%E5%8F%8A%E4%BB%A5%E4%B8%8A%EF%BC%8C%E4%B8%BA%E4%BA%86%E4%BF%9D%E8%AF%81%E6%95%B0%E6%8D%AE%E5%8E%9F%E5%AD%90%E6%80%A7%E5%92%8C%E5%94%AF%E4%B8%80%E6%80%A7%EF%BC%8C%E9%9C%80%E8%A6%81%E5%BC%80%E5%90%AF%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="操作两张表及以上，为了保证数据原子性和唯一性，需要开启事务控制"><a href="#操作两张表及以上，为了保证数据原子性和唯一性，需要开启事务控制" class="headerlink" title="操作两张表及以上，为了保证数据原子性和唯一性，需要开启事务控制"></a>操作两张表及以上，为了保证数据原子性和唯一性，需要开启事务控制</h2><h3 id="1、在引导类中添加注解-EnableTransactionManagement"><a href="#1、在引导类中添加注解-EnableTransactionManagement" class="headerlink" title="1、在引导类中添加注解  @EnableTransactionManagement"></a>1、在引导类中添加注解  @EnableTransactionManagement</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@ServletComponentScan</span><br><span class="hljs-comment">//开启事务</span><br><span class="hljs-meta">@EnableTransactionManagement</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReggieApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ReggieApplication.class,args);<br>        log.info(<span class="hljs-string">&quot;项目启动成功...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、在操作数据库表的方法上添加注解-Transactional-rollbackFor-x3D-Exception-class-表示支持事务控制"><a href="#2、在操作数据库表的方法上添加注解-Transactional-rollbackFor-x3D-Exception-class-表示支持事务控制" class="headerlink" title="2、在操作数据库表的方法上添加注解 @Transactional(rollbackFor &#x3D; Exception.class) 表示支持事务控制"></a>2、在操作数据库表的方法上添加注解 @Transactional(rollbackFor &#x3D; Exception.class) 表示支持事务控制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;ArticleMapper, Article&gt;<br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ArticleService</span> &#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何优雅的转换Bean对象？</title>
    <link href="/2022/10/20/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E8%BD%AC%E6%8D%A2Bean%E5%AF%B9%E8%B1%A1%EF%BC%9F/"/>
    <url>/2022/10/20/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E8%BD%AC%E6%8D%A2Bean%E5%AF%B9%E8%B1%A1%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="如何优雅的转换Bean对象？"><a href="#如何优雅的转换Bean对象？" class="headerlink" title="如何优雅的转换Bean对象？"></a>如何优雅的转换Bean对象？</h2><h3 id="1、BeanUtils工具类"><a href="#1、BeanUtils工具类" class="headerlink" title="1、BeanUtils工具类"></a>1、BeanUtils工具类</h3><h4 id="1-1-BeanUtils-的用法"><a href="#1-1-BeanUtils-的用法" class="headerlink" title="1.1 BeanUtils 的用法"></a>1.1 BeanUtils 的用法</h4><blockquote><p>避免使用 Apache BeanUtils 进行属性的copy</p><p>Apache BeanUtils 的性能较差，可以使用Spring BeanUtils 或者 Cglib Utils  注意：均是浅拷贝</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.BeanUtils;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copy</span><span class="hljs-params">(DishDto dishDtoParam)</span> &#123;<br>    <span class="hljs-type">Dish</span> <span class="hljs-variable">dish</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dish</span>();<br>    <span class="hljs-comment">//将 dishDtoParam 中的 dish中 拥有的属性数据复制到 dish中</span><br>    <span class="hljs-comment">//源数据 ---&gt; 空数据</span><br>    BeanUtils.copyProperties(dishDtoParam, dish);<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qidasheng2012/article/details/84562732">更多用法请点击此处</a></p><h4 id="1-2-BeanUtils-的缺点"><a href="#1-2-BeanUtils-的缺点" class="headerlink" title="1.2 BeanUtils 的缺点"></a>1.2 BeanUtils 的缺点</h4><ul><li>复制对象时字段类型不一致，导致赋值不上，你怎么解决？自己拓展？</li><li>复制对象时字段名称不一致，例如CarPo里叫carName，CarVo里叫name，导致赋值不上，你怎么解决？自己拓展？</li><li>如果是集合类的复制，例如List<CarPo>转换为List<CarVo>,你怎么处理？</li><li>(省略一万字….)</li></ul><hr><h2 id="MapStruct"><a href="#MapStruct" class="headerlink" title="MapStruct"></a>MapStruct</h2><div class="note note-primary">            <p>pmo.xml</p>          </div><h3 id="1、pom文件引入依赖"><a href="#1、pom文件引入依赖" class="headerlink" title="1、pom文件引入依赖"></a>1、pom文件引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mapstruct<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- jdk8以下就使用mapstruct --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapstruct-jdk8<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.0.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mapstruct<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapstruct-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.0.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、准备两个实体类"><a href="#2、准备两个实体类" class="headerlink" title="2、准备两个实体类"></a>2、准备两个实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//CarPo</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CarPo</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String brand;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//CarVo</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CarVo</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String brand;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、转换接口"><a href="#3、转换接口" class="headerlink" title="3、转换接口"></a>3、转换接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CarCovertBasic</span> &#123;<br>    <span class="hljs-type">CarCovertBasic</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <br>    Mappers.getMapper(CarCovertBasic.class);<br>    <br>    CarVo <span class="hljs-title function_">toConvertVo</span><span class="hljs-params">(CarPo source)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、测试代码"><a href="#4、测试代码" class="headerlink" title="4、测试代码"></a>4、测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实际中从数据库取</span><br><span class="hljs-type">CarPo</span> <span class="hljs-variable">carPo</span> <span class="hljs-operator">=</span> CarPo.builder().id(<span class="hljs-number">1</span>)<br>                           .brand(<span class="hljs-string">&quot;BMW&quot;</span>)<br>                           .build();<br><span class="hljs-type">CarVo</span> <span class="hljs-variable">carVo</span> <span class="hljs-operator">=</span> CarCovertBasic.INSTANCE.toConvertVo(carPo);<br>System.out.println(carVo);<br></code></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CarVo(<span class="hljs-built_in">id</span>=1, brand=BMW)<br></code></pre></td></tr></table></figure><h3 id="5、原理"><a href="#5、原理" class="headerlink" title="5、原理"></a>5、原理</h3><p>其实原理就是MapStruct插件会识别我们的接口，生成一个实现类，在实现类中，为我们实现了set逻辑！例如，上面的例子中，给CarCovertBasic接口，生成了一个实现类CarCovertBasicImpl，我们可以用反编译工具看到源码如下图所示</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/image-20221020235237572.png" alt="image-20221020235237572"></p><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p><a href="https://mp.weixin.qq.com/s/ZLOLhPNwqNtO2gxOiZ5oNA">如何优雅的转换Bean对象? (qq.com)</a></p><p><a href="https://www.cnblogs.com/gotten/p/13052911.html?spm=a2c6h.12873639.article-detail.7.618522e7WHQQfT">MapStruct用法 - moguantang - 博客园 (cnblogs.com)</a></p><p><a href="https://developer.aliyun.com/article/782986#slide-11">Java 实体映射工具 MapStruct-阿里云开发者社区 (aliyun.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis Plus 公共字段填充功能</title>
    <link href="/2022/10/20/Mybatis%20Plus%20%E5%85%AC%E5%85%B1%E5%AD%97%E6%AE%B5%E5%A1%AB%E5%85%85%E5%8A%9F%E8%83%BD/"/>
    <url>/2022/10/20/Mybatis%20Plus%20%E5%85%AC%E5%85%B1%E5%AD%97%E6%AE%B5%E5%A1%AB%E5%85%85%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="Mybatis-Plus-公共字段填充功能"><a href="#Mybatis-Plus-公共字段填充功能" class="headerlink" title="Mybatis Plus 公共字段填充功能"></a>Mybatis Plus 公共字段填充功能</h2><h3 id="1、在实体类的属性上加入-TableField注解，指定自动填充的策略"><a href="#1、在实体类的属性上加入-TableField注解，指定自动填充的策略" class="headerlink" title="1、在实体类的属性上加入@TableField注解，指定自动填充的策略"></a>1、在实体类的属性上加入@TableField注解，指定自动填充的策略</h3><div class="note note-primary">            <p>Employee.java</p>          </div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span> <span class="hljs-comment">//新增时自动填充</span><br><span class="hljs-keyword">private</span> LocalDateTime createTime;<br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span> <span class="hljs-comment">//新增和修改时自动填充</span><br><span class="hljs-keyword">private</span> LocalDateTime updateTime;<br><br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br><span class="hljs-keyword">private</span> Long createUser;<br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><br><span class="hljs-keyword">private</span> Long updateUser;<br></code></pre></td></tr></table></figure><h3 id="2、按照框架要求编写元数据对象处理器，在此类中统一为公共字段赋值，此类需要实现MetaObjectHandler接口"><a href="#2、按照框架要求编写元数据对象处理器，在此类中统一为公共字段赋值，此类需要实现MetaObjectHandler接口" class="headerlink" title="2、按照框架要求编写元数据对象处理器，在此类中统一为公共字段赋值，此类需要实现MetaObjectHandler接口"></a>2、按照框架要求编写<strong>元数据对象处理器</strong>，在此类中统一为公共字段赋值，此类需要实现<strong>MetaObjectHandler</strong>接口</h3><div class="note note-primary">            <p>MyMetaObjectHandler.java</p><p>放在公共包common下</p>          </div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;<br><span class="hljs-keyword">import</span> org.apache.ibatis.reflection.MetaObject;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> JiaNing</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMetaObjectHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MetaObjectHandler</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增时填充内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> metaObject 元对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>        metaObject.setValue(<span class="hljs-string">&quot;createTime&quot;</span>, now);<br>        metaObject.setValue(<span class="hljs-string">&quot;updateTime&quot;</span>, now);<br>        metaObject.setValue(<span class="hljs-string">&quot;createUser&quot;</span>, BaseContext.getThreadLocalUserId());<br>        metaObject.setValue(<span class="hljs-string">&quot;updateUser&quot;</span>, BaseContext.getThreadLocalUserId());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改时填充内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> metaObject 元对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>        metaObject.setValue(<span class="hljs-string">&quot;updateTime&quot;</span>, LocalDateTime.now());<br>        metaObject.setValue(<span class="hljs-string">&quot;updateUser&quot;</span>, BaseContext.getThreadLocalUserId());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、动态获取当前登录用户的id：BaseContext-getThreadLocalUserId"><a href="#3、动态获取当前登录用户的id：BaseContext-getThreadLocalUserId" class="headerlink" title="3、动态获取当前登录用户的id：BaseContext.getThreadLocalUserId()"></a>3、动态获取当前登录用户的id：BaseContext.getThreadLocalUserId()</h3><p>想要动态的获取当前登录用户id，我们可以通过<strong>ThreadLocal</strong>类来实现</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202209261123801.png" alt="image-20220926112358668"></p><blockquote><p><strong>ThreadLocal：</strong></p><p>ThreadLocal并不是一个Thread，而是Thread的局部变量。当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本。</p><p>ThreadLocal为每个线程提供单独一份存储空间，具有线程隔离的效果，只有在线程内才能获取到对应的值，线程外则不能访问当前线程对应的值。</p><p><strong>ThreadLocal常用方法：</strong></p><p>A. public void set(T value) : 设置当前线程的线程局部变量的值</p><p>B. public T get() : 返回当前线程所对应的线程局部变量的值</p><p>C. public void remove() : 删除当前线程所对应的线程局部变量的值 </p></blockquote><h4 id="3-1-编写BaseContext工具类，基于ThreadLocal封装的工具类"><a href="#3-1-编写BaseContext工具类，基于ThreadLocal封装的工具类" class="headerlink" title="3.1 编写BaseContext工具类，基于ThreadLocal封装的工具类"></a>3.1 编写BaseContext工具类，基于ThreadLocal封装的工具类</h4><div class="note note-primary">            <p>BaseContext.java</p><p>放在公共包common下</p>          </div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基于ThreadLocal封装工具类，用户保存和获取当前登录用户id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> JiaNing</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseContext</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;Long&gt; THREAD_LOCAL_USER_ID = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 接收过滤器中传入的登录用户id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setThreadLocalUserId</span><span class="hljs-params">(Long id)</span> &#123;<br>        THREAD_LOCAL_USER_ID.set(id);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回此id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Long <span class="hljs-title function_">getThreadLocalUserId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> THREAD_LOCAL_USER_ID.get();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-在拦截器中将当前登录用户id使用工具类的set方法传入到ThreadLocal"><a href="#3-2-在拦截器中将当前登录用户id使用工具类的set方法传入到ThreadLocal" class="headerlink" title="3.2 在拦截器中将当前登录用户id使用工具类的set方法传入到ThreadLocal"></a>3.2 在拦截器中将当前登录用户id使用工具类的set方法传入到ThreadLocal</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过Session获取当前登录用户id</span><br><span class="hljs-type">Long</span> <span class="hljs-variable">employeeId</span> <span class="hljs-operator">=</span> (Long) request.getSession().getAttribute(GlobalConstant.EMPLOYEE_KEY);<br><span class="hljs-comment">//调用BaseContext静态方法set将登录用户id传入</span><br>BaseContext.setThreadLocalUserId(employeeId);<br></code></pre></td></tr></table></figure><h4 id="3-3-在MyMetaObjectHandler的方法中调用BaseContext的静态方法get获取登录用户的id"><a href="#3-3-在MyMetaObjectHandler的方法中调用BaseContext的静态方法get获取登录用户的id" class="headerlink" title="3.3 在MyMetaObjectHandler的方法中调用BaseContext的静态方法get获取登录用户的id"></a>3.3 在MyMetaObjectHandler的方法中调用BaseContext的静态方法get获取登录用户的id</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//这一步在第2步时已经改完</span><br>metaObject.setValue(<span class="hljs-string">&quot;createUser&quot;</span>, BaseContext.getThreadLocalUserId());<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis Plus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Spring Boot项目中定义全局异常处理类处理异常</title>
    <link href="/2022/10/20/%E5%9C%A8Spring-Boot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%B1%BB%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8/"/>
    <url>/2022/10/20/%E5%9C%A8Spring-Boot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%B1%BB%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<h2 id="在Spring-Boot项目中定义全局异常处理类处理异常"><a href="#在Spring-Boot项目中定义全局异常处理类处理异常" class="headerlink" title="在Spring Boot项目中定义全局异常处理类处理异常"></a>在Spring Boot项目中定义全局异常处理类处理异常</h2><p><strong>全局异常处理：@ControllerAdvice +  @ResponseBody + @ExceptionHandler</strong></p><ol><li>错误信息可以友好的返回（只返回错误代码、提示信息等）</li><li>减少代码中随处可见的try catch代码块，增加代码的可阅读性</li><li>统一处理，异常标准化</li><li>方便记录日志信息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.sql.SQLIntegrityConstraintViolationException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> JiaNing</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//接收RestController和Controller注解的代码的异常</span><br><span class="hljs-meta">@ControllerAdvice(annotations = &#123;RestController.class, Controller.class&#125;)</span><br><span class="hljs-meta">@ResponseBody</span> <span class="hljs-comment">//用于返回信息</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br>    <span class="hljs-comment">//接收SQLIntegrityConstraintViolationException异常</span><br>    <span class="hljs-meta">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span><br>    <span class="hljs-keyword">public</span> R&lt;String&gt; <span class="hljs-title function_">exceptionHandler</span><span class="hljs-params">(SQLIntegrityConstraintViolationException exception)</span> &#123;<br>        <span class="hljs-comment">//获取异常信息:  Duplicate entry &#x27;admin&#x27; for key &#x27;employee.idx_username&#x27;</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> exception.getMessage();<br>        <span class="hljs-comment">//如果异常信息中包含 Duplicate entry 字段 (重复录入)</span><br>        <span class="hljs-keyword">if</span> (message.contains(<span class="hljs-string">&quot;Duplicate entry&quot;</span>)) &#123;<br>            <span class="hljs-comment">//使用 空格 分割异常信息</span><br>            String[] split = message.split(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-comment">//拼接信息并返回</span><br>            <span class="hljs-keyword">return</span> R.error(split[<span class="hljs-number">2</span>] + <span class="hljs-string">&quot;已存在&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> R.error(<span class="hljs-string">&quot;未知错误&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些前端传入参数的校验方式</title>
    <link href="/2022/10/20/%E4%B8%80%E4%BA%9B%E5%89%8D%E7%AB%AF%E4%BC%A0%E5%85%A5%E5%8F%82%E6%95%B0%E7%9A%84%E6%A0%A1%E9%AA%8C%E6%96%B9%E5%BC%8F/"/>
    <url>/2022/10/20/%E4%B8%80%E4%BA%9B%E5%89%8D%E7%AB%AF%E4%BC%A0%E5%85%A5%E5%8F%82%E6%95%B0%E7%9A%84%E6%A0%A1%E9%AA%8C%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="一些前端传入参数的校验方式"><a href="#一些前端传入参数的校验方式" class="headerlink" title="一些前端传入参数的校验方式"></a>一些前端传入参数的校验方式</h2><h3 id="1、字符串：StringUtils-isBlank-（判断是否为空）"><a href="#1、字符串：StringUtils-isBlank-（判断是否为空）" class="headerlink" title="1、字符串：StringUtils.isBlank （判断是否为空）"></a>1、字符串：StringUtils.isBlank （判断是否为空）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//参数校验</span><br><span class="hljs-keyword">import</span> org.apache.commons.lang.StringUtils;<br><br><span class="hljs-keyword">if</span> (StringUtils.isBlank(employeeParam.getUsername()) || StringUtils.isBlank(employeeParam.getPassword())) &#123;<br>    <span class="hljs-comment">//如果用户名或密码其中一个为null</span><br>    <span class="hljs-keyword">return</span> R.error(<span class="hljs-string">&quot;登陆失败&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、集合：CollectionUtils-isEmpty-（判断是否为空）"><a href="#2、集合：CollectionUtils-isEmpty-（判断是否为空）" class="headerlink" title="2、集合：CollectionUtils.isEmpty （判断是否为空）"></a>2、集合：CollectionUtils.isEmpty （判断是否为空）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//此方法是mybatisplus下的工具类方法</span><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.CollectionUtils;<br><br><span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(ids)) &#123;<br><span class="hljs-keyword">return</span> R.error(GlobalConstant.FALSE);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果没有使用mybatisplus，可以直接用集合自带的isEmpty方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (ids.isEmpty()) &#123;<br><span class="hljs-keyword">return</span> R.error(<span class="hljs-string">&quot;传入的参数有误&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、通用：Optional-ofNullable"><a href="#3、通用：Optional-ofNullable" class="headerlink" title="3、通用：Optional.ofNullable"></a>3、通用：Optional.ofNullable</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Optional;<br><br><span class="hljs-comment">//判断id是否是null</span><br>Optional.ofNullable(orders.getId())<br>    <span class="hljs-comment">//是空就抛出自定义异常</span><br>    .orElseThrow(() -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomException</span>(GlobalConstant.FALSE));<br><br><span class="hljs-comment">//判断对象是否为空</span><br>Optional.ofNullable(oldOrder)<br>    <span class="hljs-comment">//是空就抛出自定义异常</span><br>    .orElseThrow(() -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomException</span>(GlobalConstant.FALSE));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSON.toJSONString：将对象转换为Json</title>
    <link href="/2022/10/20/JSON.toJSONString%EF%BC%9A%E5%B0%86%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%8D%A2%E4%B8%BAJson/"/>
    <url>/2022/10/20/JSON.toJSONString%EF%BC%9A%E5%B0%86%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%8D%A2%E4%B8%BAJson/</url>
    
    <content type="html"><![CDATA[<h2 id="JSON-toJSONString：将对象转换为Json"><a href="#JSON-toJSONString：将对象转换为Json" class="headerlink" title="JSON.toJSONString：将对象转换为Json"></a>JSON.toJSONString：将对象转换为Json</h2><div class="note note-primary">            <p>1.1  pom.xml</p>          </div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.28<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> JSON.toJSONString(xxxx);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用过滤器匹配静态资源时equas无法匹配   /xxxx/**</title>
    <link href="/2022/10/20/%E4%BD%BF%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8%E5%8C%B9%E9%85%8D%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%97%B6equas%E6%97%A0%E6%B3%95%E5%8C%B9%E9%85%8D-xxxx/"/>
    <url>/2022/10/20/%E4%BD%BF%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8%E5%8C%B9%E9%85%8D%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%97%B6equas%E6%97%A0%E6%B3%95%E5%8C%B9%E9%85%8D-xxxx/</url>
    
    <content type="html"><![CDATA[<h2 id="使用过滤器匹配静态资源时equas无法匹配-x2F-xxxx-x2F"><a href="#使用过滤器匹配静态资源时equas无法匹配-x2F-xxxx-x2F" class="headerlink" title="使用过滤器匹配静态资源时equas无法匹配   &#x2F;xxxx&#x2F;**"></a>使用过滤器匹配静态资源时equas无法匹配   &#x2F;xxxx&#x2F;**</h2><p><strong>解决方法：使用AntPathMatcher类的match方法</strong></p><p>类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用AntPathMatcher类的match方法进行地址匹配</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AntPathMatcher</span> <span class="hljs-variable">MATCHER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AntPathMatcher</span>();<br><span class="hljs-comment">//要放行的uri地址</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String[] URIS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<br>    <span class="hljs-string">&quot;/employee/login&quot;</span>,<br>    <span class="hljs-string">&quot;/employee/logout&quot;</span>,<br>    <span class="hljs-string">&quot;/backend/**&quot;</span>,<br>    <span class="hljs-string">&quot;/front/**&quot;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>方法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest) servletRequest;<br><span class="hljs-comment">//获取本次请求的URI</span><br><span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> request.getRequestURI();<br><span class="hljs-comment">//地址匹配</span><br><span class="hljs-keyword">for</span> (String u : URIS) &#123;<br>    <span class="hljs-keyword">if</span> (MATCHER.match(u, uri)) &#123;  <span class="hljs-comment">//uri通过</span><br>        filterChain.doFilter(servletRequest, servletResponse);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>过滤器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用git命令</title>
    <link href="/2022/10/20/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/10/20/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="常用git命令"><a href="#常用git命令" class="headerlink" title="常用git命令"></a>常用git命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将当前目录初始化为git仓库（本地执行）</span><br>git init<br><br><span class="hljs-comment"># 将工作区文件提交到暂存区</span><br>git add  <span class="hljs-comment"># 工作区 -&gt; 暂存区</span><br><br><span class="hljs-comment"># 将暂存区文件提交到本地仓库</span><br>git commit -m <span class="hljs-string">&quot;前缀:提交日志&quot;</span>   <span class="hljs-comment"># -m 参数可选  提交的日志规范</span><br>前缀：<br>feat： 新功能（feature）<br>fix： 修补bug<br>docs： 修改文档（documentation）<br>style： 样式（不影响代码运行的变动）<br>refactor：重构（即不是新增功能，也不是修改bug的代码变动）<br>perf：代码性能优化<br><span class="hljs-built_in">test</span>： 增加测试<br><br><span class="hljs-comment"># 查看暂存区、工作区的文件状态</span><br>git status<br><br><span class="hljs-comment"># 查看日志</span><br>git <span class="hljs-built_in">log</span> [option]  <span class="hljs-comment"># 此命令可以手动配置为一个别名</span><br>options:<br>--all  显示所有分支<br>--pretty=oneline 将提交信息显示为一行<br>--abbrev-commit  使得输出的commitId更简短<br>--graph  以图的形式显示<br><span class="hljs-comment"># 版本回退</span><br>git reset  --hard commitID  <span class="hljs-comment"># commitID 可以使用`git-log`或`git log`指令查看</span><br><br><span class="hljs-comment"># 查看已经删除的记录</span><br>git reflog<br><br><span class="hljs-comment"># 添加文件到忽略列表</span><br>创建 .gitignore 文件<br><br><span class="hljs-comment"># 查看本地分支</span><br>git branch<br><br><span class="hljs-comment"># 创建本地分支</span><br>git branch 分支名<br><br><span class="hljs-comment"># 切换分支</span><br>git checkout 分支名<br><br><span class="hljs-comment"># 创建并切换分支</span><br>git checkout -b 分支名<br><br><span class="hljs-comment"># 合并分支</span><br>git merge 分支名称<br><br><span class="hljs-comment"># 删除分支 (不能删除当前分支，之恶能删除其他分支)</span><br>git branch -d b1  删除分支时，需要做各种检查<br>git branch -D b1 不做任何检查，强制删除<br><br><span class="hljs-comment"># 开发中分支规则</span><br>1、master （生产） 分支：线上分支，主分支，中小规模项目作为线上运行的应用对应的分支<br>2、develop / dev（开发）分支：是从master创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线要求，都可以在此版本进行开发，阶段开发完成后，需要是合并到master分支,准备上线<br>3、feature/xxxx分支：从develop创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完成后合并到develop分支。<br>4、hotfix/xxxx分支：从master派生的分支，一般作为线上bug修复使用，修复完成后需要合并到master、<span class="hljs-built_in">test</span>、develop分支<br>5、<span class="hljs-built_in">test</span>分支（用于代码测试）<br>6、pre分支（预上线分支）<br><br><span class="hljs-comment"># 生成SSH公钥</span><br>ssh-keygen -t rsa  -C <span class="hljs-string">&quot;邮箱&quot;</span><br><span class="hljs-comment"># 验证是否配置成功</span><br>ssh -T git@gitee.com<br><br><span class="hljs-comment"># 先初始化本地仓库，然后与已创建的远程仓库进行对接</span><br>git remote add &lt;远端名称&gt;  &lt;仓库路径&gt;<br><br><span class="hljs-comment"># 从远程仓库克隆到本地</span><br>git <span class="hljs-built_in">clone</span> &lt;仓库路径&gt; [本地目录]  <span class="hljs-comment"># 本地目录可以省略，会自动生成一个目录</span><br><br><span class="hljs-comment"># 查看远程仓库</span><br>git remote<br><br><span class="hljs-comment"># 将本地仓库文件推送到远程仓库</span><br>git push [-f] [--set-upstream] [远端名称 [本地分支名][:远端分支名]] <span class="hljs-comment"># -f  表示强制覆盖 </span><br><span class="hljs-comment"># 如果远程分支名和本地分支名称相同，则可以只写本地分支</span><br>git push origin master<br><span class="hljs-comment"># `--set-upstream` 推送到远端的同时并且建立起和远端分支的关联关系</span><br>git push  --set-upstream origin master：master<br><span class="hljs-comment"># 如果当前分支已经和远端分支关联，则可以省略分支名和远端名</span><br>git push<br><br><span class="hljs-comment"># 查看本地分支与远程分支的关联关系</span><br>git branch -vv<br><br><span class="hljs-comment"># 从远程仓库抓取 不会进行合并</span><br>git fetch [remote name] [branch name] <br><br><span class="hljs-comment"># 从远程仓库拉取 自动进行合并 等同于fetch+merge</span><br>git pull [remote name] [branch name] <span class="hljs-comment">#如果不指定远端名称和分支名，则抓取所有并更新当前分支</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MybatisPlus：Service层和Mapper层继承那些类？</title>
    <link href="/2022/10/20/MybatisPlus%EF%BC%9AService%E5%B1%82%E5%92%8CMapper%E5%B1%82%E7%BB%A7%E6%89%BF%E9%82%A3%E4%BA%9B%E7%B1%BB%EF%BC%9F/"/>
    <url>/2022/10/20/MybatisPlus%EF%BC%9AService%E5%B1%82%E5%92%8CMapper%E5%B1%82%E7%BB%A7%E6%89%BF%E9%82%A3%E4%BA%9B%E7%B1%BB%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="MybatisPlus：Service层和Mapper层继承那些类？"><a href="#MybatisPlus：Service层和Mapper层继承那些类？" class="headerlink" title="MybatisPlus：Service层和Mapper层继承那些类？"></a>MybatisPlus：Service层和Mapper层继承那些类？</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Service层</span><br><span class="hljs-comment">//接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IEmployeeService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;Employee&gt;<br><span class="hljs-comment">//实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;EmployeeMapper, Employee&gt; <span class="hljs-comment">//EmployeeMapper mapper层接口；Employee 实体类 </span><br><br><span class="hljs-comment">//Mapper层</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmployeeMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;Employee&gt; <span class="hljs-comment">//Employee 实体类 </span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MybatisPlus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Session的创建和删除</title>
    <link href="/2022/10/20/Session%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%88%A0%E9%99%A4/"/>
    <url>/2022/10/20/Session%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%88%A0%E9%99%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="Session的创建和删除"><a href="#Session的创建和删除" class="headerlink" title="Session的创建和删除"></a>Session的创建和删除</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建</span><br><span class="hljs-comment">//HttpServletRequest 对象 ：httpServletRequest</span><br><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> httpServletRequest.getSession(); <span class="hljs-comment">//创建session</span><br>session.setAttribute(<span class="hljs-string">&quot;employee&quot;</span>, emp.getId());<span class="hljs-comment">//向会话中添加信息（键，值）</span><br><br><span class="hljs-comment">//删除</span><br>httpServletRequest.getSession().removeAttribute(<span class="hljs-string">&quot;employee&quot;</span>); <span class="hljs-comment">//删除employee会话信息</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Session</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随机生成验证码工具类</title>
    <link href="/2022/10/20/%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2022/10/20/%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="随机生成验证码工具类"><a href="#随机生成验证码工具类" class="headerlink" title="随机生成验证码工具类"></a>随机生成验证码工具类</h2><div class="note note-primary">            <p>ValidateCodeUtils.java</p>          </div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 随机生成验证码工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValidateCodeUtils</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 随机生成验证码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> length 长度为4位或者6位</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">generateValidateCode</span><span class="hljs-params">(<span class="hljs-type">int</span> length)</span>&#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span><span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span>(length == <span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-comment">//生成随机数，最大为9999</span><br>            code = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">9999</span>);<br>            <span class="hljs-keyword">if</span>(code &lt; <span class="hljs-number">1000</span>)&#123;<br>                <span class="hljs-comment">//保证随机数为4位数字</span><br>                code = code + <span class="hljs-number">1000</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(length == <span class="hljs-number">6</span>)&#123;<br>            <span class="hljs-comment">//生成随机数，最大为999999</span><br>            code = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">999999</span>);<br>            <span class="hljs-keyword">if</span>(code &lt; <span class="hljs-number">100000</span>)&#123;<br>                <span class="hljs-comment">//保证随机数为6位数字</span><br>                code = code + <span class="hljs-number">100000</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;只能生成4位或6位数字验证码&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 随机生成指定证长度字符串验码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> length 长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateValidateCode4String</span><span class="hljs-params">(<span class="hljs-type">int</span> length)</span>&#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">rdm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">hash1</span> <span class="hljs-operator">=</span> Integer.toHexString(rdm.nextInt());<br>        <span class="hljs-keyword">return</span> hash1.substring(<span class="hljs-number">0</span>, length);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Utils</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图片上传(七牛云)</title>
    <link href="/2022/10/19/%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    <url>/2022/10/19/%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0%E4%B8%83%E7%89%9B%E4%BA%91/</url>
    
    <content type="html"><![CDATA[<h2 id="上传图片到七牛云"><a href="#上传图片到七牛云" class="headerlink" title="上传图片到七牛云"></a>上传图片到七牛云</h2><blockquote><p>七牛云工具类  QiniuUtils</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.qiniu.common.QiniuException;<br><span class="hljs-keyword">import</span> com.qiniu.http.Response;<br><span class="hljs-keyword">import</span> com.qiniu.storage.BucketManager;<br><span class="hljs-keyword">import</span> com.qiniu.storage.Configuration;<br><span class="hljs-keyword">import</span> com.qiniu.storage.Region;<br><span class="hljs-keyword">import</span> com.qiniu.storage.UploadManager;<br><span class="hljs-keyword">import</span> com.qiniu.util.Auth;<br><span class="hljs-keyword">import</span> lombok.Getter;<br><span class="hljs-keyword">import</span> lombok.Setter;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zhangmeng</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 七牛云工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019/9/26</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QiniuUtils</span> &#123;<br>    <span class="hljs-keyword">private</span> String accessKey;<br>    <span class="hljs-keyword">private</span> String secretKey;<br>    <span class="hljs-keyword">private</span> String urlPrefix;<br>    <span class="hljs-keyword">private</span> String bucket;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 上传到七牛云</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> is             上传内容的输入流</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> uploadFileName</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">upload2Qiniu</span><span class="hljs-params">(InputStream is, String uploadFileName)</span> &#123;<br>        <span class="hljs-comment">//构造一个带指定Zone对象的配置类</span><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">cfg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>(Region.autoRegion());<br>        <span class="hljs-comment">//...其他参数参考类注释</span><br>        <span class="hljs-type">UploadManager</span> <span class="hljs-variable">uploadManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UploadManager</span>(cfg);<br><br>        <span class="hljs-type">Auth</span> <span class="hljs-variable">auth</span> <span class="hljs-operator">=</span> Auth.create(accessKey, secretKey);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">upToken</span> <span class="hljs-operator">=</span> auth.uploadToken(bucket);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> uploadManager.put(is, uploadFileName, upToken, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>            <span class="hljs-comment">//解析上传成功的结果</span><br>            log.info(response.bodyString());<br>            <span class="hljs-comment">// 访问路径</span><br>            log.info(<span class="hljs-string">&quot;&#123;&#125;/&#123;&#125;&quot;</span>, urlPrefix, uploadFileName);<br>        &#125; <span class="hljs-keyword">catch</span> (QiniuException ex) &#123;<br>            <span class="hljs-type">Response</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> ex.response;<br>            log.error(r.toString());<br>            <span class="hljs-keyword">try</span> &#123;<br>                log.error(r.bodyString());<br>            &#125; <span class="hljs-keyword">catch</span> (QiniuException ex2) &#123;<br>                <span class="hljs-comment">//ignore</span><br>                log.error(<span class="hljs-string">&quot;&quot;</span>, ex2);<br>            &#125;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(ex);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文件不存在，则不作任何操作</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fileName</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteFileFromQiniu</span><span class="hljs-params">(String fileName)</span> &#123;<br>        <span class="hljs-comment">//构造一个带指定Zone对象的配置类</span><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">cfg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>(Region.autoRegion());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> fileName;<br>        <span class="hljs-type">Auth</span> <span class="hljs-variable">auth</span> <span class="hljs-operator">=</span> Auth.create(accessKey, secretKey);<br>        <span class="hljs-type">BucketManager</span> <span class="hljs-variable">bucketManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BucketManager</span>(auth, cfg);<br>        <span class="hljs-keyword">try</span> &#123;<br>            bucketManager.delete(bucket, key);<br>        &#125; <span class="hljs-keyword">catch</span> (QiniuException ex) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-number">612</span> == ex.code())&#123;<br>                <span class="hljs-comment">// 文件不存在，则无需任何操作，直接返回</span><br>                log.info(<span class="hljs-string">&quot;[七牛云工具类-删除]重复删除，跳过:&#123;&#125;&quot;</span>,fileName );<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//如果遇到异常，说明删除失败</span><br>                log.error(<span class="hljs-string">&quot;code:&#123;&#125;&quot;</span>, ex.code());<br>                log.error(ex.response.toString());<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(ex);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>上传图片接口 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> QiniuUtils qiniuUtils;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 上传图片</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> multipartFile</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br>   <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">upload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;imgFile&quot;)</span> MultipartFile multipartFile)</span> &#123;<br>       log.info(<span class="hljs-string">&quot;文件上传，name:&#123;&#125;,size:&#123;&#125;&quot;</span>, multipartFile.getOriginalFilename(), multipartFile.getSize());<br>       <span class="hljs-comment">//原始文件名</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">originalFileName</span> <span class="hljs-operator">=</span> multipartFile.getOriginalFilename();<br>       <span class="hljs-comment">//使用UUID构造不重复的文件名</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>) + <span class="hljs-string">&quot;_&quot;</span> + originalFileName;<br><br>       <span class="hljs-comment">//获取输入流并上传</span><br>       <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> multipartFile.getInputStream()) &#123;<br>           qiniuUtils.upload2Qiniu(is, fileName);<br>       &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>           log.error(<span class="hljs-string">&quot;&quot;</span>, e);<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-literal">false</span>, MessageConst.PIC_UPLOAD_FAIL);<br>       &#125;<br><br>       <span class="hljs-comment">//构造返回值</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">pic</span> <span class="hljs-operator">=</span> qiniuUtils.getUrlPrefix() + fileName;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-literal">true</span>, MessageConst.PIC_UPLOAD_SUCCESS, pic);<br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Utils</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用CompletableFuture对接口方法(串行)优化</title>
    <link href="/2022/10/19/CompletableFuture%E6%8E%A5%E5%8F%A3%E6%96%B9%E6%B3%95%E4%B8%B2%E8%A1%8C%E4%BC%98%E5%8C%96/"/>
    <url>/2022/10/19/CompletableFuture%E6%8E%A5%E5%8F%A3%E6%96%B9%E6%B3%95%E4%B8%B2%E8%A1%8C%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="使用CompletableFuture对接口方法-串行-优化"><a href="#使用CompletableFuture对接口方法-串行-优化" class="headerlink" title="使用CompletableFuture对接口方法(串行)优化"></a>使用CompletableFuture对接口方法(串行)优化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.util.StopWatch;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.math.RoundingMode;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.concurrent.CompletableFuture;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> t3rik</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2022/10/18 16:12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br><br>    <span class="hljs-comment">//没有优化</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/multitask&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMultitask</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">StopWatch</span> <span class="hljs-variable">stopWatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StopWatch</span>();<br>        stopWatch.start();<br>        <span class="hljs-comment">// 2s</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">do1</span> <span class="hljs-operator">=</span> do1();<br>        <span class="hljs-comment">// 1s</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">do2</span> <span class="hljs-operator">=</span> do2();<br>        <span class="hljs-comment">// 1s</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">do3</span> <span class="hljs-operator">=</span> do3();<br>        <span class="hljs-comment">// 1s</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">do4</span> <span class="hljs-operator">=</span> do4();<br>        List&lt;String&gt; array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        array.add(do1);<br>        array.add(do2);<br>        array.add(do3);<br>        array.add(do4);<br>        array.forEach(item -&gt; System.out.println(item + <span class="hljs-string">&quot;,&quot;</span>));<br>        stopWatch.stop();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">timeSeconds</span> <span class="hljs-operator">=</span> stopWatch.getLastTaskInfo().getTimeSeconds();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">bigDecimal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(timeSeconds).setScale(<span class="hljs-number">2</span>, RoundingMode.HALF_UP).doubleValue();<br>        System.out.println(bigDecimal);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">do1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">2000</span>);<br>            System.out.println(<span class="hljs-string">&quot;do1====&gt;执行完毕&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;do1&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">do2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            System.out.println(<span class="hljs-string">&quot;do2====&gt;执行完毕&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;do2&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">do3</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            System.out.println(<span class="hljs-string">&quot;do3====&gt;执行完毕&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;do3&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">do4</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            System.out.println(<span class="hljs-string">&quot;do4====&gt;执行完毕&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;do4&quot;</span>;<br>    &#125;<br><br><br><br>    <span class="hljs-comment">//优化后</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/completableFuture&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCompletableFuture</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class="hljs-type">StopWatch</span> <span class="hljs-variable">stopWatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StopWatch</span>();<br>        stopWatch.start();<br>        CompletableFuture&lt;String&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;<br>            <span class="hljs-keyword">return</span> do1();<br>        &#125;);<br>        CompletableFuture&lt;String&gt; future2 = CompletableFuture.supplyAsync(() -&gt; &#123;<br>            <span class="hljs-keyword">return</span> do2();<br>        &#125;);<br>        CompletableFuture&lt;String&gt; future3 = CompletableFuture.supplyAsync(() -&gt; &#123;<br>            <span class="hljs-keyword">return</span> do3();<br>        &#125;);<br>        CompletableFuture&lt;String&gt; future4 = CompletableFuture.supplyAsync(() -&gt; &#123;<br>            <span class="hljs-keyword">return</span> do4();<br>        &#125;);<br>        CompletableFuture.allOf(future, future2, future3, future4).get();<br>        List&lt;String&gt; array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        array.add(future.get());<br>        array.add(future2.get());<br>        array.add(future3.get());<br>        array.add(future4.get());<br><br>        array.forEach(item -&gt; System.out.println(item + <span class="hljs-string">&quot;,&quot;</span>));<br>        stopWatch.stop();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">timeSeconds</span> <span class="hljs-operator">=</span> stopWatch.getLastTaskInfo().getTimeSeconds();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">bigDecimal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(timeSeconds).setScale(<span class="hljs-number">2</span>, RoundingMode.HALF_UP).doubleValue();<br>        System.out.println(bigDecimal);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>maven多环境配置</title>
    <link href="/2022/10/14/Spring%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE/"/>
    <url>/2022/10/14/Spring%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="maven多环境配置"><a href="#maven多环境配置" class="headerlink" title="maven多环境配置"></a>maven多环境配置</h2><p>pom.xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  多环境配置  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>dev<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">profile.active</span>&gt;</span><br>                    dev<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">profile.active</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">profile.active</span>&gt;</span><br>                    test<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">profile.active</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>pro<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">profile.active</span>&gt;</span><br>                    pro<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">profile.active</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">useDefaultDelimiters</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">useDefaultDelimiters</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring的DigestUtils工具类（md5等加密）</title>
    <link href="/2022/10/12/Spring%E7%9A%84DigestUtils%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%88md5%E7%AD%89%E5%8A%A0%E5%AF%86%EF%BC%89/"/>
    <url>/2022/10/12/Spring%E7%9A%84DigestUtils%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%88md5%E7%AD%89%E5%8A%A0%E5%AF%86%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="md5加密：DigestUtils-md5DigestAsHex"><a href="#md5加密：DigestUtils-md5DigestAsHex" class="headerlink" title="md5加密：DigestUtils.md5DigestAsHex()"></a>md5加密：DigestUtils.md5DigestAsHex()</h3><blockquote><p>可以增加逻辑处理让加密更加安全</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.util.DigestUtils;<br><br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> DigestUtils.md5DigestAsHex(password.getBytes());<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>静态资源映射：SpringBoot默认只会公开static下的静态资源</title>
    <link href="/2022/10/12/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%98%A0%E5%B0%84%EF%BC%9ASpringBoot%E9%BB%98%E8%AE%A4%E5%8F%AA%E4%BC%9A%E5%85%AC%E5%BC%80static%E4%B8%8B%E7%9A%84%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/"/>
    <url>/2022/10/12/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%98%A0%E5%B0%84%EF%BC%9ASpringBoot%E9%BB%98%E8%AE%A4%E5%8F%AA%E4%BC%9A%E5%85%AC%E5%BC%80static%E4%B8%8B%E7%9A%84%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h2 id="静态资源映射：SpringBoot默认只会公开static下的静态资源"><a href="#静态资源映射：SpringBoot默认只会公开static下的静态资源" class="headerlink" title="静态资源映射：SpringBoot默认只会公开static下的静态资源"></a>静态资源映射：SpringBoot默认只会公开static下的静态资源</h2><blockquote><p>访问其他文件下的静态资源时需要设置静态资源映射，创建配置类并继承<strong>WebMvcConfigurationSupport</strong> 类，重写**addResourceHandlers(ResourceHandlerRegistry registry)**方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebMvcConfigurationSupport</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置静态资源映射</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> registry</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;开始进行静态资源映射...&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/backend/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;classpath:/backend/&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/front/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;classpath:/front/&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库编码：表情等特殊符号乱码问题</title>
    <link href="/2022/10/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A0%81%EF%BC%9A%E8%A1%A8%E6%83%85%E7%AD%89%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <url>/2022/10/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A0%81%EF%BC%9A%E8%A1%A8%E6%83%85%E7%AD%89%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="数据库编码：表情等特殊符号乱码问题"><a href="#数据库编码：表情等特殊符号乱码问题" class="headerlink" title="数据库编码：表情等特殊符号乱码问题"></a>数据库编码：表情等特殊符号乱码问题</h2><blockquote><p>创建数据库时 使用utf8mb4编码</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> schema <span class="hljs-string">&#x27;schema_name&#x27;</span> <span class="hljs-keyword">default</span> charset utf8mb4;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>添加数据后返回该数据自增后的ID（XML）</title>
    <link href="/2022/10/12/%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE%E5%90%8E%E8%BF%94%E5%9B%9E%E8%AF%A5%E6%95%B0%E6%8D%AE%E8%87%AA%E5%A2%9E%E5%90%8E%E7%9A%84ID%EF%BC%88XML%EF%BC%89/"/>
    <url>/2022/10/12/%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE%E5%90%8E%E8%BF%94%E5%9B%9E%E8%AF%A5%E6%95%B0%E6%8D%AE%E8%87%AA%E5%A2%9E%E5%90%8E%E7%9A%84ID%EF%BC%88XML%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="添加数据后返回该数据自增后的ID（XML）"><a href="#添加数据后返回该数据自增后的ID（XML）" class="headerlink" title="添加数据后返回该数据自增后的ID（XML）"></a>添加数据后返回该数据自增后的ID（XML）</h2><blockquote><p>xml代码</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;xx.xx.xx.xx&quot;</span>&gt;</span><br> <span class="hljs-comment">&lt;!-- 添加useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkGroupSave&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;checkGroup&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>     insert into t_checkgroup(id, code, name, helpCode, sex, remark, attention)<br>        values (#&#123;id&#125;,#&#123;code&#125;,#&#123;name&#125;,#&#123;helpCode&#125;,#&#123;sex&#125;,#&#123;remark&#125;,#&#123;attention&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>自增ID返回到了传入数据的类中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//server层通过该类的getId方法获取ID</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">checkGroupId</span> <span class="hljs-operator">=</span> checkGroup.getId();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目优化方案一：MySQL（MariaDB）主从分离（最终数据一致性方案）</title>
    <link href="/2022/10/10/%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88%E4%B8%80%EF%BC%9AMySQL%EF%BC%88MariaDB%EF%BC%89%E4%B8%BB%E4%BB%8E%E5%88%86%E7%A6%BB%EF%BC%88%E6%9C%80%E7%BB%88%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E6%96%B9%E6%A1%88%EF%BC%89/"/>
    <url>/2022/10/10/%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88%E4%B8%80%EF%BC%9AMySQL%EF%BC%88MariaDB%EF%BC%89%E4%B8%BB%E4%BB%8E%E5%88%86%E7%A6%BB%EF%BC%88%E6%9C%80%E7%BB%88%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E6%96%B9%E6%A1%88%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="项目优化方案一：MySQL（MariaDB）主从分离（最终数据一致性方案）"><a href="#项目优化方案一：MySQL（MariaDB）主从分离（最终数据一致性方案）" class="headerlink" title="项目优化方案一：MySQL（MariaDB）主从分离（最终数据一致性方案）"></a>项目优化方案一：MySQL（MariaDB）主从分离（最终数据一致性方案）</h2><blockquote><p>​MariaDB是mysql的一个分支，是完全兼容Mysql。就代表，几乎所有的mysql的操作，包括增删改查及开启binlog日志，主从，其他的一些配置，都可以在MariaDB上做。和Mysql的做法一样就可以。</p><p>MariaDB 安装简单，一个yum命令就能安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装mariadb</span><br>yum -y install mariadb-server<br></code></pre></td></tr></table></figure></blockquote><h3 id="一、数据库主从同步和读写分离有什么好处？"><a href="#一、数据库主从同步和读写分离有什么好处？" class="headerlink" title="一、数据库主从同步和读写分离有什么好处？"></a>一、数据库主从同步和读写分离有什么好处？</h3><h4 id="1、数据库主从同步可以备份数据（延时）可以保证数据库数据安全的方法之一"><a href="#1、数据库主从同步可以备份数据（延时）可以保证数据库数据安全的方法之一" class="headerlink" title="1、数据库主从同步可以备份数据（延时）可以保证数据库数据安全的方法之一"></a>1、数据库主从同步可以备份数据（延时）可以保证数据库数据安全的方法之一</h4><h4 id="2、主库执行修改数据SQL语句，从库执行读取数据SQL语句，可以减少单独一台数据库承受的压力"><a href="#2、主库执行修改数据SQL语句，从库执行读取数据SQL语句，可以减少单独一台数据库承受的压力" class="headerlink" title="2、主库执行修改数据SQL语句，从库执行读取数据SQL语句，可以减少单独一台数据库承受的压力"></a>2、主库执行修改数据SQL语句，从库执行读取数据SQL语句，可以减少单独一台数据库承受的压力</h4><hr><h3 id="二、MySQL（MariaDB）主从复制"><a href="#二、MySQL（MariaDB）主从复制" class="headerlink" title="二、MySQL（MariaDB）主从复制"></a>二、MySQL（MariaDB）主从复制</h3><blockquote><p>MySQL数据库默认是支持主从复制的，不需要借助于其他的技术，只需要在数据库中简单的配置即可。</p></blockquote><p>​MySQL主从复制是一个异步的复制过程，底层是基于Mysql数据库自带的 <strong>二进制日志</strong> 功能。就是一台或多台MySQL数据库（slave，即<strong>从库</strong>）从另一台MySQL数据库（master，即<strong>主库</strong>）进行日志的复制，然后再解析日志并应用到自身，最终实现 <strong>从库</strong> 的数据和 <strong>主库</strong> 的数据保持一致。MySQL主从复制是MySQL数据库自带功能，无需借助第三方工具。</p><blockquote><p><strong>二进制日志：</strong> </p><p>​二进制日志（BINLOG）记录了所有的 DDL（数据定义语言）语句和 DML（数据操纵语言）语句，但是不包括数据查询语句。此日志对于灾难时的数据恢复起着极其重要的作用，MySQL的主从复制， 就是通过该binlog实现的。默认MySQL是未开启该日志的。</p></blockquote><h4 id="1、主从复制实现步骤："><a href="#1、主从复制实现步骤：" class="headerlink" title="1、主从复制实现步骤："></a>1、主从复制实现步骤：</h4><ol><li><p>防火墙开放3306端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 放开3306端口</span><br>firewall-cmd --zone=public --add-port=3306/tcp --permanent<br><span class="hljs-comment"># 重新加载配置</span><br>firewall-cmd --reload<br><span class="hljs-comment"># 显示当前放开的端口号</span><br>firewall-cmd --zone=public --list-ports<br></code></pre></td></tr></table></figure></li><li><p>两台服务器中的数据库要启动起来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start mariadb  <span class="hljs-comment"># mysql</span><br></code></pre></td></tr></table></figure></li><li><p>设置主库 master节点的数据库，修改mysql数据库配置文件 my.cnf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">log-bin=mysql-bin   <span class="hljs-comment">#[必须]启用二进制日志</span><br>server-id=200       <span class="hljs-comment">#[必须]服务器唯一ID(唯一即可)</span><br></code></pre></td></tr></table></figure></li><li><p>重启master节点数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl restart mysqld  <span class="hljs-comment"># mariadb</span><br></code></pre></td></tr></table></figure></li><li><p>登录master节点数据库，创建数据同步的用户并授权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -u root -p<br><br><span class="hljs-comment"># 创建用户并授权</span><br><span class="hljs-comment"># grant replication slave on</span><br>GRANT REPLICATION SLAVE ON *.* to <span class="hljs-string">&#x27;xiaoming&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified by <span class="hljs-string">&#x27;Root@123456&#x27;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>​上面SQL的作用是创建一个用户 xiaoming ，密码为 Root@123456 ，并且给xiaoming用户授予REPLICATION SLAVE权限。常用于建立复制时所需要用到的用户权限，也就是slave必须被master授权具有该权限的用户，才能通过该用户复制。</p><p>MySQL密码复杂程度说明: </p><p>​目前mysql5.7默认密码校验策略等级为 MEDIUM , 该等级要求密码组成为: 数字、小写字母、大写字母 、特殊字符、长度至少8位</p></blockquote></li><li><p>查看master节点数据库同步状态，需要记录File和Position的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">show master status\G;<br></code></pre></td></tr></table></figure><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202210092317220.png"></p></li><li><p>修改slave从节点数据库配置文件 my.cof</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">server-id=201 <span class="hljs-comment">#[必须]服务器唯一ID</span><br></code></pre></td></tr></table></figure></li><li><p>重启slave从节点数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl restart mariadb <span class="hljs-comment"># mysql</span><br></code></pre></td></tr></table></figure></li><li><p>登录slave从节点数据库，设置主库地址以及同步位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">change master to master_host=<span class="hljs-string">&#x27;192.168.188.128&#x27;</span>,master_user=<span class="hljs-string">&#x27;xiaoming&#x27;</span>,master_password=<span class="hljs-string">&#x27;Root@123456&#x27;</span>,master_log_file=<span class="hljs-string">&#x27;mysql-bin.000001&#x27;</span>,master_log_pos=154;<br><br><span class="hljs-comment"># 开启主从同步</span><br>start slave;<br></code></pre></td></tr></table></figure><blockquote><p>参数说明： </p><p>​A. master_host : 主库的IP地址</p><p>​B. master_user : 访问主库进行主从复制的用户名(上面在主库创建的)</p><p>​C. master_password : 访问主库进行主从复制的用户名对应的密码</p><p>​D. master_log_file : 从哪个日志文件开始同步(上述查询master状态中展示的有)</p><p>​E. master_log_pos : 从指定日志文件的哪个位置开始同步(上述查询master状态中展示的有)</p></blockquote></li><li><p>查看slave从节点数据库状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">show slave status\G;<br></code></pre></td></tr></table></figure><blockquote><p>然后通过状态信息中的 Slave_IO_running 和 Slave_SQL_running 可以看出主从同步是否就绪，如果这两个参数全为Yes，表示主从同步已经配置完成。</p></blockquote><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202210092322782.png" alt="image-20210825142313382"></p></li><li><p>测试，master主节点数据库创建库、表等操作，查看slave从节点数据库是否自动同步命令创建库、表。</p></li></ol><h4 id="2、数据库主从同步中binlog日志和Position的作用"><a href="#2、数据库主从同步中binlog日志和Position的作用" class="headerlink" title="2、数据库主从同步中binlog日志和Position的作用"></a>2、数据库主从同步中binlog日志和Position的作用</h4><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202210092358297.png" alt="image-20221009235804237"></p><ol><li><p>binlog日志就是File值：mysql-bin.000001，这里面用二进制记录了所有主数据库的所有操作（注意：只有开启binlog日志配置后才会生成binlog日志并记录操作）</p></li><li><p>Position值就是pos，它是主数据库开启binlog日志之后最后操作的记录坐标，在从数据库设置同步位置时，填入此记录坐标，表示从该记录坐标为起点，往后的所有新生成日志操作都会被从数据库的执行。（从154开始往后开始同步操作）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">master_log_pos=154<br></code></pre></td></tr></table></figure></li><li><p>没有开启binlog日志前的所有操作无法同步</p></li></ol><h4 id="3、如果执行完某部操作之后，主从同步挂了，也就是从库不再同步数据了，查看从库的状态，Slave-SQL-Runnig如果显示的是no"><a href="#3、如果执行完某部操作之后，主从同步挂了，也就是从库不再同步数据了，查看从库的状态，Slave-SQL-Runnig如果显示的是no" class="headerlink" title="3、如果执行完某部操作之后，主从同步挂了，也就是从库不再同步数据了，查看从库的状态，Slave_SQL_Runnig如果显示的是no"></a>3、如果执行完某部操作之后，主从同步挂了，也就是从库不再同步数据了，查看从库的状态，Slave_SQL_Runnig如果显示的是no</h4><ul><li><p>可能原因：主数据执行操作的库、表、字段等在从数据库中不存在</p></li><li><p>解决思路</p><ul><li><p>先停掉从库主从</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 停掉主从</span><br>stop slave; <br></code></pre></td></tr></table></figure></li><li><p>手动同步，主库有什么，从库就要有什么</p></li><li><p>开启从库主从</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 开启主从</span><br>start slave ; <br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="4、MySQL的主从复制原理"><a href="#4、MySQL的主从复制原理" class="headerlink" title="4、MySQL的主从复制原理"></a>4、MySQL的主从复制原理</h4><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202210100022960.png" alt="image-20210825110417975"></p><p><strong>MySQL复制过程分成三步：</strong></p><p>1). MySQL master 将数据变更写入二进制日志( binary log)</p><p>2). slave将master的binary log拷贝到它的中继日志（relay log）</p><p>3). slave重做中继日志中的事件，将数据变更反映它自己的数据</p><hr><h3 id="三、MySQL（MariaDB）读写分离"><a href="#三、MySQL（MariaDB）读写分离" class="headerlink" title="三、MySQL（MariaDB）读写分离"></a>三、MySQL（MariaDB）读写分离</h3><p>​面对日益增加的系统访问量，数据库的吞吐量面临着巨大瓶颈。 对于同一时刻有大量并发读操作和较少写操作类型的应用系统来说，将数据库拆分为<strong>主库</strong>和<strong>从库</strong>，主库负责处理事务性的增删改操作，从库负责处理查询操作，能够有效的避免由数据更新导致的行锁，使得整个系统的查询性能得到极大的改善。</p><p>​通过读写分离,就可以降低单台数据库的访问压力, 提高访问效率，也可以避免单机故障。</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202210092335846.png" alt="image-20210825145647274"></p><h4 id="1、Sharding-JDBC"><a href="#1、Sharding-JDBC" class="headerlink" title="1、Sharding-JDBC"></a>1、Sharding-JDBC</h4><p>​Sharding-JDBC定位为轻量级Java框架，在Java的JDBC层提供的额外服务。 它使用客户端直连数据库，以jar包形式提供服务，无需额外部署和依赖，可理解为增强版的JDBC驱动，完全兼容JDBC和各种ORM框架。</p><p>​使用Sharding-JDBC可以在程序中轻松的实现数据库读写分离。</p><h5 id="1-1-Sharding-JDBC具有以下几个特点："><a href="#1-1-Sharding-JDBC具有以下几个特点：" class="headerlink" title="1.1 Sharding-JDBC具有以下几个特点："></a>1.1 Sharding-JDBC具有以下几个特点：</h5><p>​1). 适用于任何基于JDBC的ORM框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template或直接使用JDBC。</p><p>​2). 支持任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, Druid, HikariCP等。</p><p>​3). 支持任意实现JDBC规范的数据库。目前支持MySQL，Oracle，SQLServer，PostgreSQL以及任何遵循SQL92标准的数据库。</p><h4 id="2、读写分离实现步骤："><a href="#2、读写分离实现步骤：" class="headerlink" title="2、读写分离实现步骤："></a>2、读写分离实现步骤：</h4><ol><li><p>在pom.xml中增加shardingJdbc的maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.0-RC1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在application.yml中增加配置</p><p>这里的配置推荐写到新的yml文件中，如：application-sharding.yml 中</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">main:</span><br>    <span class="hljs-comment"># 如果当前项目中存在同名的bean,后定义的bean会覆盖先定义的</span><br>    <span class="hljs-attr">allow-bean-definition-overriding:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">shardingsphere:</span><br>    <span class="hljs-attr">datasource:</span><br>      <span class="hljs-attr">names:</span><br>        <span class="hljs-string">master,slave</span><br>      <span class="hljs-comment"># 主数据源</span><br>      <span class="hljs-attr">master:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>        <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>        <span class="hljs-comment"># 这里的ip地址和数据库仓库要更改成你的master节点ip和要连接的数据库</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.200.200:3306/rw?characterEncoding=utf-8</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">root</span>  <span class="hljs-comment"># 记得更改你的密码</span><br>      <span class="hljs-comment"># 从数据源</span><br>      <span class="hljs-attr">slave:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>        <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>        <span class="hljs-comment"># 这里的ip地址和数据库仓库要更改成你的slave节点ip和要连接的数据库</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.200.201:3306/rw?characterEncoding=utf-8</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">root</span>  <span class="hljs-comment"># 记得更改你的密码</span><br>    <span class="hljs-attr">masterslave:</span><br>      <span class="hljs-comment"># 读写分离配置</span><br>      <span class="hljs-attr">load-balance-algorithm-type:</span> <span class="hljs-string">round_robin</span> <span class="hljs-comment">#轮询</span><br>      <span class="hljs-comment"># 最终的数据源名称</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">dataSource</span><br>      <span class="hljs-comment"># 主库数据源名称</span><br>      <span class="hljs-attr">master-data-source-name:</span> <span class="hljs-string">master</span><br>      <span class="hljs-comment"># 从库数据源名称列表，多个逗号分隔</span><br>      <span class="hljs-attr">slave-data-source-names:</span> <span class="hljs-string">slave</span><br>    <span class="hljs-attr">props:</span><br>      <span class="hljs-attr">sql:</span><br>        <span class="hljs-attr">show:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#开启SQL显示，默认false</span><br></code></pre></td></tr></table></figure><p>然后在 主配置文件 application.yml 中的 spring：下 添加 profiles：和 include：sharding 进行导入配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">include:</span> <span class="hljs-string">sharding</span>  <span class="hljs-comment"># sharding 要和 新建的 application-sharding.yml 文件 - 后内容对应</span><br></code></pre></td></tr></table></figure><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202210092342704.png"></p></li><li><p>测试</p><p>​配置完毕之后，我们就可以重启服务，通过postman来访问controller的方法，来完成数据的增删改查，我们可以通过debug及日志的方式来查看每一次执行增删改查操作，使用的是哪个数据源，连接的是哪个数据库。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>状态码-Enum枚举类模板</title>
    <link href="/2022/10/06/%E7%8A%B6%E6%80%81%E7%A0%81-Enum%E6%9E%9A%E4%B8%BE%E7%B1%BB%E6%A8%A1%E6%9D%BF/"/>
    <url>/2022/10/06/%E7%8A%B6%E6%80%81%E7%A0%81-Enum%E6%9E%9A%E4%B8%BE%E7%B1%BB%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="状态码-Enum枚举类模板"><a href="#状态码-Enum枚举类模板" class="headerlink" title="状态码-Enum枚举类模板"></a>状态码-Enum枚举类模板</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">StatusTypeEnum</span> &#123;<br>    DISABLED(<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;禁用/停售&quot;</span>, <span class="hljs-number">0</span>),<br>    ENABLED(<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;启用/启售&quot;</span>, <span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 状态集合</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, StatusTypeEnum&gt; STATUS_TYPE_ENUM_MAP;<br><br>    <span class="hljs-comment">//初始化</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        STATUS_TYPE_ENUM_MAP = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (StatusTypeEnum value : StatusTypeEnum.values()) &#123;<br>            STATUS_TYPE_ENUM_MAP.put(value.strType, value);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> String strType;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer intType;<br><br>    StatusTypeEnum(String strType, String name, <span class="hljs-type">int</span> intType) &#123;<br>        <span class="hljs-built_in">this</span>.strType = strType;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.intType = intType;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStrType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> strType;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getIntType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> intType;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStrType</span><span class="hljs-params">(String strType)</span> &#123;<br>        <span class="hljs-built_in">this</span>.strType = strType;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setIntType</span><span class="hljs-params">(Integer intType)</span> &#123;<br>        <span class="hljs-built_in">this</span>.intType = intType;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>枚举类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手机验证码登录简单业务流程</title>
    <link href="/2022/10/06/%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81%E7%99%BB%E5%BD%95%E7%AE%80%E5%8D%95%E4%B8%9A%E5%8A%A1%E6%B5%81%E7%A8%8B%E5%9B%BE/"/>
    <url>/2022/10/06/%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81%E7%99%BB%E5%BD%95%E7%AE%80%E5%8D%95%E4%B8%9A%E5%8A%A1%E6%B5%81%E7%A8%8B%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="手机验证码登录简单业务流程图"><a href="#手机验证码登录简单业务流程图" class="headerlink" title="手机验证码登录简单业务流程图"></a>手机验证码登录简单业务流程图</h2><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202210062035554.png" alt="image-20221006203537447"></p>]]></content>
    
    
    <categories>
      
      <category>业务流程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>业务流程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么要编写Redis的配置类重新定义RedisTemplate</title>
    <link href="/2022/10/06/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%BC%96%E5%86%99Redis%E7%9A%84%E9%85%8D%E7%BD%AE%E7%B1%BB%E9%87%8D%E6%96%B0%E5%AE%9A%E4%B9%89RedisTemplate/"/>
    <url>/2022/10/06/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%BC%96%E5%86%99Redis%E7%9A%84%E9%85%8D%E7%BD%AE%E7%B1%BB%E9%87%8D%E6%96%B0%E5%AE%9A%E4%B9%89RedisTemplate/</url>
    
    <content type="html"><![CDATA[<h2 id="为什么要编写Redis的配置类重新定义RedisTemplate"><a href="#为什么要编写Redis的配置类重新定义RedisTemplate" class="headerlink" title="为什么要编写Redis的配置类重新定义RedisTemplate"></a>为什么要编写Redis的配置类重新定义RedisTemplate</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.cache.annotation.CachingConfigurerSupport;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CachingConfigurerSupport</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory connectionFactory)</span> &#123;<br>        RedisTemplate&lt;Object, Object&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        redisTemplate.setDefaultSerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));<br>        <span class="hljs-comment">// 序列化构造器</span><br>        redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        redisTemplate.setConnectionFactory(connectionFactory);<br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1、在SpringBoot工程启动时-会加载一个自动配置类-RedisAutoConfiguration-在里面已经声明了RedisTemplate这个bean"><a href="#1、在SpringBoot工程启动时-会加载一个自动配置类-RedisAutoConfiguration-在里面已经声明了RedisTemplate这个bean" class="headerlink" title="1、在SpringBoot工程启动时, 会加载一个自动配置类 RedisAutoConfiguration, 在里面已经声明了RedisTemplate这个bean"></a>1、在SpringBoot工程启动时, 会加载一个自动配置类 RedisAutoConfiguration, 在里面已经声明了RedisTemplate这个bean</h3><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202210062008529.png" alt="image-20221006200837423"></p><p>上述框架默认声明的RedisTemplate用的Key和value的序列化方式是默认的 JdkSerializationRedisSerializer ，如果key采用这种方式序列化，最终我们在测试时通过redis的图形化界面查询不是很方便，如下图：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202210062010803.png" alt="image-20221006201031752"></p><h3 id="2、如果使用我们自己定义的RedisTemplate，-key的序列化方式使用的是StringRedisSerializer-也就是字符串形式-最终效果如下"><a href="#2、如果使用我们自己定义的RedisTemplate，-key的序列化方式使用的是StringRedisSerializer-也就是字符串形式-最终效果如下" class="headerlink" title="2、如果使用我们自己定义的RedisTemplate， key的序列化方式使用的是StringRedisSerializer, 也就是字符串形式, 最终效果如下:"></a>2、如果使用我们自己定义的RedisTemplate， key的序列化方式使用的是StringRedisSerializer, 也就是字符串形式, 最终效果如下:</h3><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202210062024373.png" alt="image-20221006202444318"></p><h3 id="3、定义了两个bean会不会出现冲突呢-答案是不会-因为源码如下"><a href="#3、定义了两个bean会不会出现冲突呢-答案是不会-因为源码如下" class="headerlink" title="3、定义了两个bean会不会出现冲突呢? 答案是不会, 因为源码如下:"></a>3、定义了两个bean会不会出现冲突呢? 答案是不会, 因为源码如下:</h3><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202210062025331.png" alt="image-20221006202515263"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis配置类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见面试题</title>
    <link href="/2022/09/25/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2022/09/25/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>1、hashmap初始化的时候，默认的长度是16，为什么是16<br>2、hashmap的扩容过程<br>3、hashmap的哈希过程。就是计算key的过程<br>3.1 为什么有位移操作<br>4、hashmap的底层数据结构。得知道为什么是这样的数据结构</p><p>题目 1:JVM 整体结构是什么样的?</p><p>题目 2:JVM 运行时数据区描述下?</p><p>题目 19:Java 中的值传递和引用传递?</p><p>题目 23:Java 反射有了解吗?</p><p>题目 24:Java 注解可以加在什么地方?Java 自带注解有哪 些?哪里有用到注解?</p><p>题目 26:try catch 有 return，发生异常，走 return 还是 finally</p><p>题目 30:什么是双亲委派模型?为什么要使用双亲委派模型?</p><p>题目 29:Java 内存泄漏</p><p>题目 28:浅拷贝和深拷贝区别</p><p>1、ThreadLocal的使用场景</p><p>2、ThreadLocal内存泄漏问题</p><p>3、ThreadLocal是如何保证线程安全的</p><p>4、JMM是什么</p><hr><h2 id="1、bean的生命周期"><a href="#1、bean的生命周期" class="headerlink" title="1、bean的生命周期"></a>1、bean的生命周期</h2><ul><li>初始化容器<ol><li>创建对象（内存分配）</li><li>执行构造方法</li><li>执行属性注入（set操作）</li><li>执行bean初始化方法</li></ol></li><li>使用bean<ol><li>执行业务操作</li></ol></li><li>关闭&#x2F;销毁容器<ol><li>执行bean销毁方法</li></ol></li></ul><h2 id="2、bean生命周期控制"><a href="#2、bean生命周期控制" class="headerlink" title="2、bean生命周期控制"></a>2、bean生命周期控制</h2><p>方法一：自定义方法</p><ol><li>提供生命周期控制方法</li><li>在xml配置文件中配置生命周期控制方法</li></ol><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202209251824572.png" alt="image-20220925182423426"></p><p>方法二：接口控制</p><ol><li>实现InitializingBean和DisposableBean接口</li></ol><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202209251825904.png" alt="image-20220925182543794"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>过滤器简单代码</title>
    <link href="/2022/09/24/%E8%BF%87%E6%BB%A4%E5%99%A8%E7%AE%80%E5%8D%95%E4%BB%A3%E7%A0%81/"/>
    <url>/2022/09/24/%E8%BF%87%E6%BB%A4%E5%99%A8%E7%AE%80%E5%8D%95%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<div class="note note-warning">            <p>全局配置类 GlobalConstant.java</p>          </div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalConstant</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EMPLOYEE_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;employee&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>LoginCheckFilter.java</p>          </div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.itheima.reggie.common.GlobalConstant;<br><span class="hljs-keyword">import</span> com.itheima.reggie.common.R;<br><span class="hljs-keyword">import</span> org.springframework.util.AntPathMatcher;<br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebFilter;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> JiaNing</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebFilter(filterName = &quot;LoginCheckFilter&quot;, urlPatterns = &quot;/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginCheckFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-comment">//要放行的uri地址</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String[] URIS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<br>            <span class="hljs-string">&quot;/employee/login&quot;</span>,<br>            <span class="hljs-string">&quot;/employee/logout&quot;</span>,<br>            <span class="hljs-string">&quot;/backend/**&quot;</span>,<br>            <span class="hljs-string">&quot;/front/**&quot;</span><br>    &#125;;<br>    <span class="hljs-comment">//使用AntPathMatcher类的match方法进行地址匹配</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AntPathMatcher</span> <span class="hljs-variable">MATCHER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AntPathMatcher</span>();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest) servletRequest;<br>        <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> (HttpServletResponse) servletResponse;<br>        <span class="hljs-comment">//1、获取本次请求的URI</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> request.getRequestURI();<br>        <span class="hljs-comment">//2、判断本次请求是否需要校验用户登录状态</span><br>        <span class="hljs-comment">//地址匹配</span><br>        <span class="hljs-keyword">for</span> (String u : URIS) &#123;<br>            <span class="hljs-keyword">if</span> (MATCHER.match(u, uri)) &#123;<br>                filterChain.doFilter(servletRequest, servletResponse);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//3、判断登录状态，如果已登录，则直接放行</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">employeeId</span> <span class="hljs-operator">=</span> (Long) request.getSession().getAttribute(GlobalConstant.EMPLOYEE_KEY);<br>        <span class="hljs-keyword">if</span> (employeeId != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//存在employee会话 放行</span><br>            filterChain.doFilter(servletRequest, servletResponse);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//4、如果未登录, 则返回未登录结果</span><br>        <span class="hljs-comment">//使用阿里巴巴的对象转JSON工具</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> JSON.toJSONString(R.error(<span class="hljs-string">&quot;NOTLOGIN&quot;</span>));<br>        response.getWriter().write(string);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>过滤器Filter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用配置类</title>
    <link href="/2022/09/24/%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E7%B1%BB/"/>
    <url>/2022/09/24/%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="1、MybatisPlus配置类"><a href="#1、MybatisPlus配置类" class="headerlink" title="1、MybatisPlus配置类"></a>1、MybatisPlus配置类</h2><div class="note note-danger">            <p>MybatisPlusConfig</p>          </div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> JiaNing</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * 2022/9/24</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisPlusConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//mp的拦截器</span><br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>        <span class="hljs-comment">//在拦截器中添加分页插件</span><br>        interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>());<br>        <span class="hljs-keyword">return</span> interceptor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、基于jackson的对象映射器"><a href="#2、基于jackson的对象映射器" class="headerlink" title="2、基于jackson的对象映射器"></a>2、基于jackson的对象映射器</h2><div class="note note-danger">            <p>JacksonObjectMapper</p>          </div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.reggie.mapper;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.DeserializationFeature;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.<span class="hljs-keyword">module</span>.SimpleModule;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ser.std.ToStringSerializer;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalTimeDeserializer;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalTimeSerializer;<br><span class="hljs-keyword">import</span> java.math.BigInteger;<br><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.LocalTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 对象映射器:基于jackson将Java对象转为json，或者将json转为Java对象</span><br><span class="hljs-comment"> * 将JSON解析为Java对象的过程称为 [从JSON反序列化Java对象]</span><br><span class="hljs-comment"> * 从Java对象生成JSON的过程称为 [序列化Java对象到JSON]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JacksonObjectMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ObjectMapper</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_DATE_FORMAT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_DATE_TIME_FORMAT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_TIME_FORMAT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HH:mm:ss&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JacksonObjectMapper</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-comment">//收到未知属性时不报异常</span><br>        <span class="hljs-built_in">this</span>.configure(FAIL_ON_UNKNOWN_PROPERTIES, <span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">//反序列化时，属性不存在的兼容处理</span><br>        <span class="hljs-built_in">this</span>.getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);<br><br>        <span class="hljs-type">SimpleModule</span> <span class="hljs-variable">simpleModule</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleModule</span>()<br>                .addDeserializer(LocalDateTime.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))<br>                .addDeserializer(LocalDate.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))<br>                .addDeserializer(LocalTime.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)))<br><br>                .addSerializer(BigInteger.class, ToStringSerializer.instance)<br>                .addSerializer(Long.class, ToStringSerializer.instance)<br><br>                .addSerializer(LocalDateTime.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))<br>                .addSerializer(LocalDate.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))<br>                .addSerializer(LocalTime.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));<br>        <span class="hljs-comment">//注册功能模块 例如，可以添加自定义序列化器和反序列化器</span><br>        <span class="hljs-built_in">this</span>.registerModule(simpleModule);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、WebMvc配置类"><a href="#3、WebMvc配置类" class="headerlink" title="3、WebMvc配置类"></a>3、WebMvc配置类</h2><div class="note note-danger">            <p>WebMvcConfig</p>          </div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.reggie.config;<br><br><span class="hljs-keyword">import</span> com.itheima.reggie.mapper.JacksonObjectMapper;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.http.converter.HttpMessageConverter;<br><span class="hljs-keyword">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> JiaNing</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * 2022/9/23</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebMvcConfigurationSupport</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;开始进行静态资源映射...&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/backend/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;classpath:/backend/&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/front/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;classpath:/front/&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 扩展mvc框架的消息转换器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> converters</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">extendMessageConverters</span><span class="hljs-params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;扩展消息转换器...&quot;</span>);<br>        <span class="hljs-comment">//创建消息转换器对象</span><br>        <span class="hljs-type">MappingJackson2HttpMessageConverter</span> <span class="hljs-variable">messageConverter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MappingJackson2HttpMessageConverter</span>();<br>        <span class="hljs-comment">//设置对象转换器，底层使用Jackson将Java对象转为json</span><br>        messageConverter.setObjectMapper(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JacksonObjectMapper</span>());<br>        <span class="hljs-comment">//将上面的消息转换器对象追加到mvc框架的转换器集合中</span><br>        converters.add(<span class="hljs-number">0</span>,messageConverter);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、Redis配置类"><a href="#4、Redis配置类" class="headerlink" title="4、Redis配置类"></a>4、Redis配置类</h2><div class="note note-danger">            <p>RedisConfig</p>          </div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;Object,Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span>&#123;<br>        RedisTemplate&lt;Object, Object&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        redisTemplate.setValueSerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        redisTemplate.setHashKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        redisTemplate.setHashValueSerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        redisTemplate.setConnectionFactory(redisConnectionFactory);<br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5、Redis配置类2"><a href="#5、Redis配置类2" class="headerlink" title="5、Redis配置类2"></a>5、Redis配置类2</h2><div class="note note-danger">            <p>RedisConfig</p>          </div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.cache.annotation.CachingConfigurerSupport;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * redis配置类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Ning</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CachingConfigurerSupport</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory connectionFactory)</span> &#123;<br>        RedisTemplate&lt;Object, Object&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        redisTemplate.setDefaultSerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));<br>        <span class="hljs-comment">// 序列化构造器</span><br>        redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        redisTemplate.setConnectionFactory(connectionFactory);<br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>application.yml常见配置</title>
    <link href="/2022/09/23/application.yml%E5%B8%B8%E8%A7%81%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/09/23/application.yml%E5%B8%B8%E8%A7%81%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p>resources目录下application.yml文件常见配置</p>          </div><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 设置端口</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>  <span class="hljs-comment">#应用名称 , 可选</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">reggie_take_out</span><br>  <span class="hljs-comment"># 数据库连接</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">druid:</span><br>      <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/reggie?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>      <br><span class="hljs-comment"># redis连接      </span><br>  <span class="hljs-attr">redis:</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-comment">#redis地址</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span> <span class="hljs-comment">#端口</span><br>    <span class="hljs-attr">password:</span>   <span class="hljs-comment"># 有密码填密码 没有密码不填</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span> <span class="hljs-comment">#使用的数据库</span><br>    <br><span class="hljs-comment"># Spring Cache 框架配置</span><br>  <span class="hljs-attr">cache:</span><br>    <span class="hljs-attr">redis:</span><br>      <span class="hljs-attr">time-to-live:</span> <span class="hljs-number">1800000</span>   <span class="hljs-comment">#设置缓存过期时间，可选</span><br>      <br><span class="hljs-comment"># mybatis-plus</span><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-comment">#在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，按照驼峰命名法映射 address_book ---&gt; AddressBook</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment">#日志输出</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br>  <span class="hljs-comment"># 全局配置</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>    <span class="hljs-comment">#设置ID自增类型 默认雪花算法</span><br>      <span class="hljs-attr">id-type:</span> <span class="hljs-string">ASSIGN_ID</span><br>      <br><span class="hljs-comment"># 阿里云OSS    </span><br><span class="hljs-attr">aliyun:</span><br>  <span class="hljs-attr">oss:</span><br>    <span class="hljs-attr">endpoint:</span> <span class="hljs-string">https://oss-cn-hangzhou.aliyuncs.com</span><br>    <span class="hljs-attr">accessKeyId:</span> <span class="hljs-string">LTAI4GCH1vX6DKqJWxd6nEuW</span><br>    <span class="hljs-attr">accessKeySecret:</span> <span class="hljs-string">yBshYweHOpqDuhCArrVHwIiBKpyqSL</span><br>    <span class="hljs-attr">bucketName:</span> <span class="hljs-string">web-397</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>配置文件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置文件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pom文件常用配置</title>
    <link href="/2022/09/23/pom.xml%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/09/23/pom.xml%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h3><div class="note note-primary">            <p>pom.xml</p>          </div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>reggie_take_out<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Spring Boot 的父级依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository  从存储库中查找父级 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--Spring Boot起步依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!--test测试--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!--Web 场景启动器--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!--MybatisPlus起步依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!--lombok--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!--用于java后台处理json格式数据工具包--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.76<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!--java.lang的扩展,commons中最常用的工具包--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-lang<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!--mysql--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!--Druid官方用来简化SpringBoot配置的starter</span><br><span class="hljs-comment">把默认的数据库连接池切换为 Druid 数据库--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- redis --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br><span class="hljs-comment">&lt;!-- Spring cache缓存框架 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!--阿里云oss--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.15.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!--阿里云短信服务--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.5.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-java-sdk-dysmsapi<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--maven插件 为Spring Boot应用提供了执行Maven的操作--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>配置文件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置文件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>问题锦集</title>
    <link href="/2022/09/23/Java%E9%A1%B9%E7%9B%AE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <url>/2022/09/23/Java%E9%A1%B9%E7%9B%AE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="1、解决数据库中表情等特殊符号乱码问题："><a href="#1、解决数据库中表情等特殊符号乱码问题：" class="headerlink" title="1、解决数据库中表情等特殊符号乱码问题："></a>1、解决数据库中表情等特殊符号乱码问题：</h2><p>创建数据库时 使用utf8mb4编码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> schema <span class="hljs-string">&#x27;schema_name&#x27;</span> <span class="hljs-keyword">default</span> charset utf8mb4;<br></code></pre></td></tr></table></figure><h2 id="2、静态资源映射：SpringBoot默认只会公开static下的静态资源"><a href="#2、静态资源映射：SpringBoot默认只会公开static下的静态资源" class="headerlink" title="2、静态资源映射：SpringBoot默认只会公开static下的静态资源"></a>2、静态资源映射：SpringBoot默认只会公开static下的静态资源</h2><p>访问其他文件下的静态资源时需要设置静态资源映射，创建配置类并继承WebMvcConfigurationSupport 类，重写addResourceHandlers(ResourceHandlerRegistry registry)方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebMvcConfigurationSupport</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置静态资源映射</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> registry</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;开始进行静态资源映射...&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/backend/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;classpath:/backend/&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/front/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;classpath:/front/&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、mybatis-plus常用方法"><a href="#3、mybatis-plus常用方法" class="headerlink" title="3、mybatis-plus常用方法"></a>3、mybatis-plus常用方法</h2><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202209232024827.png" alt="image-20220923202457548"></p><h2 id="4、md5加密：DigestUtils-md5DigestAsHex"><a href="#4、md5加密：DigestUtils-md5DigestAsHex" class="headerlink" title="4、md5加密：DigestUtils.md5DigestAsHex()"></a>4、md5加密：DigestUtils.md5DigestAsHex()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> DigestUtils.md5DigestAsHex(password.getBytes());<br></code></pre></td></tr></table></figure><h2 id="5、Session的创建和删除"><a href="#5、Session的创建和删除" class="headerlink" title="5、Session的创建和删除"></a>5、Session的创建和删除</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建</span><br><span class="hljs-comment">//HttpServletRequest 对象 ：httpServletRequest</span><br><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> httpServletRequest.getSession(); <span class="hljs-comment">//创建session</span><br>session.setAttribute(<span class="hljs-string">&quot;employee&quot;</span>, emp.getId());<span class="hljs-comment">//向会话中添加信息（键，值）</span><br><span class="hljs-comment">//删除</span><br>httpServletRequest.getSession().removeAttribute(<span class="hljs-string">&quot;employee&quot;</span>); <span class="hljs-comment">//删除employee会话信息</span><br></code></pre></td></tr></table></figure><h2 id="6、使用MybatisPlus时，Service层和Mapper层继承那些类？"><a href="#6、使用MybatisPlus时，Service层和Mapper层继承那些类？" class="headerlink" title="6、使用MybatisPlus时，Service层和Mapper层继承那些类？"></a>6、使用MybatisPlus时，Service层和Mapper层继承那些类？</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Service层</span><br><span class="hljs-comment">//接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IEmployeeService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;Employee&gt;<br><span class="hljs-comment">//实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;EmployeeMapper, Employee&gt; <span class="hljs-comment">//EmployeeMapper mapper层接口；Employee 实体类 </span><br><br><span class="hljs-comment">//Mapper层</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmployeeMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;Employee&gt; <span class="hljs-comment">//Employee 实体类</span><br></code></pre></td></tr></table></figure><h2 id="7、常用git命令"><a href="#7、常用git命令" class="headerlink" title="7、常用git命令"></a>7、常用git命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将当前目录初始化为git仓库（本地执行）</span><br>git init<br><br><span class="hljs-comment"># 将工作区文件提交到暂存区</span><br>git add  <span class="hljs-comment"># 工作区 -&gt; 暂存区</span><br><br><span class="hljs-comment"># 将暂存区文件提交到本地仓库</span><br>git commit -m <span class="hljs-string">&quot;前缀:提交日志&quot;</span>   <span class="hljs-comment"># -m 参数可选  提交的日志规范</span><br>前缀：<br>feat： 新功能（feature）<br>fix： 修补bug<br>docs： 修改文档（documentation）<br>style： 样式（不影响代码运行的变动）<br>refactor：重构（即不是新增功能，也不是修改bug的代码变动）<br>perf：代码性能优化<br><span class="hljs-built_in">test</span>： 增加测试<br><br><span class="hljs-comment"># 查看暂存区、工作区的文件状态</span><br>git status<br><br><span class="hljs-comment"># 查看日志</span><br>git <span class="hljs-built_in">log</span> [option]  <span class="hljs-comment"># 此命令可以手动配置为一个别名</span><br>options:<br>--all  显示所有分支<br>--pretty=oneline 将提交信息显示为一行<br>--abbrev-commit  使得输出的commitId更简短<br>--graph  以图的形式显示<br><span class="hljs-comment"># 版本回退</span><br>git reset  --hard commitID  <span class="hljs-comment"># commitID 可以使用`git-log`或`git log`指令查看</span><br><br><span class="hljs-comment"># 查看已经删除的记录</span><br>git reflog<br><br><span class="hljs-comment"># 添加文件到忽略列表</span><br>创建 .gitignore 文件<br><br><span class="hljs-comment"># 查看本地分支</span><br>git branch<br><br><span class="hljs-comment"># 创建本地分支</span><br>git branch 分支名<br><br><span class="hljs-comment"># 切换分支</span><br>git checkout 分支名<br><br><span class="hljs-comment"># 创建并切换分支</span><br>git checkout -b 分支名<br><br><span class="hljs-comment"># 合并分支</span><br>git merge 分支名称<br><br><span class="hljs-comment"># 删除分支 (不能删除当前分支，之恶能删除其他分支)</span><br>git branch -d b1  删除分支时，需要做各种检查<br>git branch -D b1 不做任何检查，强制删除<br><br><span class="hljs-comment"># 开发中分支规则</span><br>1、master （生产） 分支：线上分支，主分支，中小规模项目作为线上运行的应用对应的分支<br>2、develop / dev（开发）分支：是从master创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线要求，都可以在此版本进行开发，阶段开发完成后，需要是合并到master分支,准备上线<br>3、feature/xxxx分支：从develop创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完成后合并到develop分支。<br>4、hotfix/xxxx分支：从master派生的分支，一般作为线上bug修复使用，修复完成后需要合并到master、<span class="hljs-built_in">test</span>、develop分支<br>5、<span class="hljs-built_in">test</span>分支（用于代码测试）<br>6、pre分支（预上线分支）<br><br><span class="hljs-comment"># 生成SSH公钥</span><br>ssh-keygen -t rsa  -C <span class="hljs-string">&quot;邮箱&quot;</span><br><span class="hljs-comment"># 验证是否配置成功</span><br>ssh -T git@gitee.com<br><br><span class="hljs-comment"># 先初始化本地仓库，然后与已创建的远程仓库进行对接</span><br>git remote add &lt;远端名称&gt;  &lt;仓库路径&gt;<br><br><span class="hljs-comment"># 从远程仓库克隆到本地</span><br>git <span class="hljs-built_in">clone</span> &lt;仓库路径&gt; [本地目录]  <span class="hljs-comment"># 本地目录可以省略，会自动生成一个目录</span><br><br><span class="hljs-comment"># 查看远程仓库</span><br>git remote<br><br><span class="hljs-comment"># 将本地仓库文件推送到远程仓库</span><br>git push [-f] [--set-upstream] [远端名称 [本地分支名][:远端分支名]] <span class="hljs-comment"># -f  表示强制覆盖 </span><br><span class="hljs-comment"># 如果远程分支名和本地分支名称相同，则可以只写本地分支</span><br>git push origin master<br><span class="hljs-comment"># `--set-upstream` 推送到远端的同时并且建立起和远端分支的关联关系</span><br>git push  --set-upstream origin master：master<br><span class="hljs-comment"># 如果当前分支已经和远端分支关联，则可以省略分支名和远端名</span><br>git push<br><br><span class="hljs-comment"># 查看本地分支与远程分支的关联关系</span><br>git branch -vv<br><br><span class="hljs-comment"># 从远程仓库抓取 不会进行合并</span><br>git fetch [remote name] [branch name] <br><br><span class="hljs-comment"># 从远程仓库拉取 自动进行合并 等同于fetch+merge</span><br>git pull [remote name] [branch name] <span class="hljs-comment">#如果不指定远端名称和分支名，则抓取所有并更新当前分支</span><br></code></pre></td></tr></table></figure><h2 id="8、使用过滤器匹配静态资源时equas无法匹配-x2F-xxxx-x2F"><a href="#8、使用过滤器匹配静态资源时equas无法匹配-x2F-xxxx-x2F" class="headerlink" title="8、使用过滤器匹配静态资源时equas无法匹配   &#x2F;xxxx&#x2F;**"></a>8、使用过滤器匹配静态资源时equas无法匹配   &#x2F;xxxx&#x2F;**</h2><p><strong>解决：使用AntPathMatcher类的match方法</strong></p><p>类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用AntPathMatcher类的match方法进行地址匹配</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AntPathMatcher</span> <span class="hljs-variable">MATCHER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AntPathMatcher</span>();<br><span class="hljs-comment">//要放行的uri地址</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String[] URIS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<br>    <span class="hljs-string">&quot;/employee/login&quot;</span>,<br>    <span class="hljs-string">&quot;/employee/logout&quot;</span>,<br>    <span class="hljs-string">&quot;/backend/**&quot;</span>,<br>    <span class="hljs-string">&quot;/front/**&quot;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>方法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest) servletRequest;<br><span class="hljs-comment">//获取本次请求的URI</span><br><span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> request.getRequestURI();<br><span class="hljs-comment">//地址匹配</span><br><span class="hljs-keyword">for</span> (String u : URIS) &#123;<br>    <span class="hljs-keyword">if</span> (MATCHER.match(u, uri)) &#123;  <span class="hljs-comment">//uri通过</span><br>        filterChain.doFilter(servletRequest, servletResponse);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9、将对象转换JSON"><a href="#9、将对象转换JSON" class="headerlink" title="9、将对象转换JSON"></a>9、将对象转换JSON</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用阿里巴巴的对象转JSON工具</span><br><span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> JSON.toJSONString(R.error(<span class="hljs-string">&quot;NOTLOGIN&quot;</span>));<br></code></pre></td></tr></table></figure><h2 id="10、前端传入的所有参数都是不可信的"><a href="#10、前端传入的所有参数都是不可信的" class="headerlink" title="10、前端传入的所有参数都是不可信的"></a>10、前端传入的所有参数都是不可信的</h2><p><strong>StringUtils.isBlank：是否为空</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//前端传入的一些参数都是不可信的 需要进行参数校验</span><br><span class="hljs-keyword">if</span> (StringUtils.isBlank(employeeParam.getUsername()) || StringUtils.isBlank(employeeParam.getPassword())) &#123;<br>    <span class="hljs-comment">//如果用户名或密码其中一个为null</span><br>    <span class="hljs-keyword">return</span> R.error(<span class="hljs-string">&quot;登陆失败&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="11、如何优雅的在Spring-Boot项目中处理异常"><a href="#11、如何优雅的在Spring-Boot项目中处理异常" class="headerlink" title="11、如何优雅的在Spring Boot项目中处理异常"></a>11、如何优雅的在Spring Boot项目中处理异常</h2><p><strong>全局异常处理：@ControllerAdvice +  @ResponseBody + @ExceptionHandler</strong></p><ol><li>错误信息可以友好的返回（只返回错误代码、提示信息等）</li><li>减少代码中随处可见的try catch代码块，增加代码的可阅读性</li><li>统一处理，异常标准化</li><li>方便记录日志信息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.sql.SQLIntegrityConstraintViolationException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> JiaNing</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//接收RestController和Controller注解的代码的异常</span><br><span class="hljs-meta">@ControllerAdvice(annotations = &#123;RestController.class, Controller.class&#125;)</span><br><span class="hljs-meta">@ResponseBody</span> <span class="hljs-comment">//用于返回信息</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br>    <span class="hljs-comment">//接收SQLIntegrityConstraintViolationException异常</span><br>    <span class="hljs-meta">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span><br>    <span class="hljs-keyword">public</span> R&lt;String&gt; <span class="hljs-title function_">exceptionHandler</span><span class="hljs-params">(SQLIntegrityConstraintViolationException exception)</span> &#123;<br>        <span class="hljs-comment">//获取异常信息:  Duplicate entry &#x27;admin&#x27; for key &#x27;employee.idx_username&#x27;</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> exception.getMessage();<br>        <span class="hljs-comment">//如果异常信息中包含 Duplicate entry 字段 (重复录入)</span><br>        <span class="hljs-keyword">if</span> (message.contains(<span class="hljs-string">&quot;Duplicate entry&quot;</span>)) &#123;<br>            <span class="hljs-comment">//使用 空格 分割异常信息</span><br>            String[] split = message.split(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-comment">//拼接信息并返回</span><br>            <span class="hljs-keyword">return</span> R.error(split[<span class="hljs-number">2</span>] + <span class="hljs-string">&quot;已存在&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> R.error(<span class="hljs-string">&quot;未知错误&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="12、数据展示页面为什么需要分页？分页其实是一种优化手段"><a href="#12、数据展示页面为什么需要分页？分页其实是一种优化手段" class="headerlink" title="12、数据展示页面为什么需要分页？分页其实是一种优化手段"></a>12、数据展示页面为什么需要分页？分页其实是一种优化手段</h2><ol><li>方便用户使用，对数据的查看更加直观</li><li>能够防止服务器端在返回大量数据时，可能会发生的内存溢出</li><li>优化数据库查询，提高查询速度</li><li>缓解前端渲染数据的压力，加快渲染速度</li></ol><h2 id="13、js只能操作16位以内的数字，如果超过这个位数的话，那么可能会粗线精度丢失的问题"><a href="#13、js只能操作16位以内的数字，如果超过这个位数的话，那么可能会粗线精度丢失的问题" class="headerlink" title="13、js只能操作16位以内的数字，如果超过这个位数的话，那么可能会粗线精度丢失的问题"></a>13、js只能操作16位以内的数字，如果超过这个位数的话，那么可能会粗线精度丢失的问题</h2><h2 id="14、Spring中的依赖注入"><a href="#14、Spring中的依赖注入" class="headerlink" title="14、Spring中的依赖注入"></a>14、Spring中的依赖注入</h2><p>Spring中的三种依赖注入方式：</p><ol><li><p><strong>Field Injection</strong> @Autowired</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>Constructor Injection</strong> 构造器注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> UserService userService;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserController</span><span class="hljs-params">(UserService userService)</span>&#123;<br>        <span class="hljs-built_in">this</span>.userService = userService;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>构造器注入引用类型</strong></p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202209251929917.png"></p></li></ol><p>​<strong>构造器注入基本类型</strong>（下面图片中出现错误，<strong>不是set方法是构造方法</strong>）</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202209251931074.png" alt="image-20220925193140947"></p><p>​<strong>构造器注入参数适配</strong></p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202209251933772.png" alt="image-20220925193350653"></p><ol start="3"><li><p><strong>Setter Injection</strong> setter注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserService</span><span class="hljs-params">(UserService userService)</span>&#123;<br>        <span class="hljs-built_in">this</span>.userService = userService;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>​<strong>setter注入引用类型</strong></p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202209251917289.png" alt="image-20220925191700149"></p><p>​<strong>setter注入基本类型</strong></p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202209251917647.png" alt="image-20220925191748525"></p><p>他们之间的比较：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202209251412191.png" alt="image-20220925141257084"></p><p>总结：</p><ol><li>依赖注入的使用上，<code>Constructor Injection</code>是首选。</li><li>使用<code>@Autowired</code>注解的时候，要使用<code>Setter Injection</code>方式，这样代码更容易编写单元测试。</li></ol><h2 id="15、Spring-Boot中的依赖注入"><a href="#15、Spring-Boot中的依赖注入" class="headerlink" title="15、Spring Boot中的依赖注入"></a>15、Spring Boot中的依赖注入</h2><ol><li><p>@Autowired注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义一个服务，添加@Service交给Spring Boot管理</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Service1</span> &#123;<br>&#125;<br><span class="hljs-comment">//在另一个Service中需要依赖，使用方法如下。</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Service2</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Service1 service1;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202209251536543.png" alt="image-20220925153658408"></p></li><li><p>@Resource注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义一个服务，添加@Service交给Spring Boot管理</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Service1</span> &#123;<br>&#125;<br><span class="hljs-comment">//在另一个Service中需要依赖，使用方法如下。</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Service2</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> Service1 service1;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202209251537827.png" alt="image-20220925153751692"></p></li><li><p>构造参数注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Service2</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Service1 service1;<br><span class="hljs-comment">//Spring Boot在进行解析时，会自动将Service1的单例对象进行注入</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Service2</span><span class="hljs-params">(Service1 service1)</span> &#123;<br>        <span class="hljs-built_in">this</span>.service1 = service1;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="16、mybatis-plus的公共字段填充功能"><a href="#16、mybatis-plus的公共字段填充功能" class="headerlink" title="16、mybatis plus的公共字段填充功能"></a>16、mybatis plus的公共字段填充功能</h2><ol><li><p>在实体类的属性上加入@TableField注解，指定自动填充的策略</p><div class="note note-primary">            <p>Employee.java</p>          </div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span> <span class="hljs-comment">//新增时自动填充</span><br><span class="hljs-keyword">private</span> LocalDateTime createTime;<br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span> <span class="hljs-comment">//新增和修改时自动填充</span><br><span class="hljs-keyword">private</span> LocalDateTime updateTime;<br>   <br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br><span class="hljs-keyword">private</span> Long createUser;<br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><br><span class="hljs-keyword">private</span> Long updateUser;<br></code></pre></td></tr></table></figure></li><li><p>按照框架要求编写<strong>元数据对象处理器</strong>，在此类中统一为公共字段赋值，此类需要实现<strong>MetaObjectHandler</strong>接口</p><div class="note note-primary">            <p>MyMetaObjectHandler.java</p><p>放在公共包common下</p>          </div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;<br><span class="hljs-keyword">import</span> org.apache.ibatis.reflection.MetaObject;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> JiaNing</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMetaObjectHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MetaObjectHandler</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增时填充内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> metaObject 元对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>        metaObject.setValue(<span class="hljs-string">&quot;createTime&quot;</span>, now);<br>        metaObject.setValue(<span class="hljs-string">&quot;updateTime&quot;</span>, now);<br>        metaObject.setValue(<span class="hljs-string">&quot;createUser&quot;</span>, BaseContext.getThreadLocalUserId());<br>        metaObject.setValue(<span class="hljs-string">&quot;updateUser&quot;</span>, BaseContext.getThreadLocalUserId());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改时填充内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> metaObject 元对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>        metaObject.setValue(<span class="hljs-string">&quot;updateTime&quot;</span>, LocalDateTime.now());<br>        metaObject.setValue(<span class="hljs-string">&quot;updateUser&quot;</span>, BaseContext.getThreadLocalUserId());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>动态获取当前登录用户的id：BaseContext.getThreadLocalUserId()</p><p>想要动态的获取当前登录用户id，我们可以通过<strong>ThreadLocal</strong>类来实现</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202209261123801.png" alt="image-20220926112358668"></p><blockquote><p><strong>ThreadLocal：</strong></p><p>ThreadLocal并不是一个Thread，而是Thread的局部变量。当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本。</p><p>ThreadLocal为每个线程提供单独一份存储空间，具有线程隔离的效果，只有在线程内才能获取到对应的值，线程外则不能访问当前线程对应的值。</p><p><strong>ThreadLocal常用方法：</strong></p><p>A. public void set(T value) : 设置当前线程的线程局部变量的值</p><p>B. public T get() : 返回当前线程所对应的线程局部变量的值</p><p>C. public void remove() : 删除当前线程所对应的线程局部变量的值 </p></blockquote><ul><li>编写BaseContext工具类，基于ThreadLocal封装的工具类</li></ul>  <div class="note note-primary">            <p>BaseContext.java</p><p>放在公共包common下</p>          </div>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基于ThreadLocal封装工具类，用户保存和获取当前登录用户id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> JiaNing</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseContext</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;Long&gt; THREAD_LOCAL_USER_ID = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 接收过滤器中传入的登录用户id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setThreadLocalUserId</span><span class="hljs-params">(Long id)</span> &#123;<br>        THREAD_LOCAL_USER_ID.set(id);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回此id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Long <span class="hljs-title function_">getThreadLocalUserId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> THREAD_LOCAL_USER_ID.get();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>在拦截器中将当前登录用户id使用工具类的set方法传入到ThreadLocal</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过Session获取当前登录用户id</span><br><span class="hljs-type">Long</span> <span class="hljs-variable">employeeId</span> <span class="hljs-operator">=</span> (Long) request.getSession().getAttribute(GlobalConstant.EMPLOYEE_KEY);<br><span class="hljs-comment">//调用BaseContext静态方法set将登录用户id传入</span><br>BaseContext.setThreadLocalUserId(employeeId);<br></code></pre></td></tr></table></figure></li><li><p>在MyMetaObjectHandler的方法中调用BaseContext的静态方法get获取登录用户的id</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//这一步在第2步时已经改完</span><br>metaObject.setValue(<span class="hljs-string">&quot;createUser&quot;</span>, BaseContext.getThreadLocalUserId());<br></code></pre></td></tr></table></figure></li></ul></li></ol><h2 id="17、自定义异常，全局处理异常"><a href="#17、自定义异常，全局处理异常" class="headerlink" title="17、自定义异常，全局处理异常"></a>17、自定义异常，全局处理异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义业务异常类-分类下存在菜品</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Ning</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomException</span> <span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>GlobalExceptionHandler</strong>类中处理异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 处理自定义 CustomException 异常</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> exception CustomException类异常</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> R</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@ExceptionHandler(CustomException.class)</span><br>   <span class="hljs-keyword">public</span> R&lt;String&gt; <span class="hljs-title function_">exceptionHandler</span><span class="hljs-params">(CustomException exception)</span> &#123;<br>       log.error(exception.getMessage());<br>       <span class="hljs-keyword">return</span> R.error(exception.getMessage());<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="18、BeanUtils工具类（用来copy实体类数据）"><a href="#18、BeanUtils工具类（用来copy实体类数据）" class="headerlink" title="18、BeanUtils工具类（用来copy实体类数据）"></a>18、BeanUtils工具类（用来copy实体类数据）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.BeanUtils;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveWithFlavor</span><span class="hljs-params">(DishDto dishDtoParam)</span> &#123;<br>    <span class="hljs-type">Dish</span> <span class="hljs-variable">dish</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dish</span>();<br>    <span class="hljs-comment">//将 dishDtoParam 中的 dish中 拥有的属性数据复制到 dish中</span><br>    <span class="hljs-comment">//源数据 ---&gt; 空数据</span><br>    BeanUtils.copyProperties(dishDtoParam, dish);<br></code></pre></td></tr></table></figure><h2 id="19、CollectionUtils工具类（集合工具类，可判断集合是否为空）"><a href="#19、CollectionUtils工具类（集合工具类，可判断集合是否为空）" class="headerlink" title="19、CollectionUtils工具类（集合工具类，可判断集合是否为空）"></a>19、CollectionUtils工具类（集合工具类，可判断集合是否为空）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.CollectionUtils;<br>CollectionUtils.isNotEmpty(集合)<br></code></pre></td></tr></table></figure><h2 id="20、操作两张表及以上，为了保证数据原子性和唯一性，需要开启事务控制"><a href="#20、操作两张表及以上，为了保证数据原子性和唯一性，需要开启事务控制" class="headerlink" title="20、操作两张表及以上，为了保证数据原子性和唯一性，需要开启事务控制"></a>20、操作两张表及以上，为了保证数据原子性和唯一性，需要开启事务控制</h2><ol><li><p>在引导类中添加注解  @EnableTransactionManagement</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@ServletComponentScan</span><br><span class="hljs-comment">//开启事务</span><br><span class="hljs-meta">@EnableTransactionManagement</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReggieApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ReggieApplication.class,args);<br>        log.info(<span class="hljs-string">&quot;项目启动成功...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在操作数据库表的方法上添加注解 @Transactional 表示支持事务控制</p></li></ol><h2 id="21、网页发起请求达到后端直到相应的过程"><a href="#21、网页发起请求达到后端直到相应的过程" class="headerlink" title="21、网页发起请求达到后端直到相应的过程"></a>21、网页发起请求达到后端直到相应的过程</h2><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202209271851308.png" alt="image-20220927185123123"></p><h2 id="22、生成雪花算法id（com-baomidou-mybatisplus）"><a href="#22、生成雪花算法id（com-baomidou-mybatisplus）" class="headerlink" title="22、生成雪花算法id（com.baomidou.mybatisplus）"></a>22、生成雪花算法id（com.baomidou.mybatisplus）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.IdWorker;<br><span class="hljs-type">long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> IdWorker.getId();<br></code></pre></td></tr></table></figure><h2 id="23、原子操作类AtomicInteger"><a href="#23、原子操作类AtomicInteger" class="headerlink" title="23、原子操作类AtomicInteger"></a>23、原子操作类AtomicInteger</h2><p>AtomicInteger是一个提供原子操作的Integer类，通过线程安全的方式操作加减。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题锦集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown文章标签</title>
    <link href="/2022/08/18/%E6%A0%BC%E5%BC%8F/"/>
    <url>/2022/08/18/%E6%A0%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h4 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h4><div class="note note-primary">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><div class="note note-secondary">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><div class="note note-success">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><div class="note note-danger">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><div class="note note-warning">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><div class="note note-info">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><div class="note note-light">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><h4 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h4><span class="label label-primary">text</span><span class="label label-default">text</span><span class="label label-info">text</span><span class="label label-success">text</span><span class="label label-warning">text</span><span class="label label-danger">text</span>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tag</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集合体系梳理</title>
    <link href="/2022/08/17/%E9%9B%86%E5%90%88%E4%BD%93%E7%B3%BB%E6%A2%B3%E7%90%86/"/>
    <url>/2022/08/17/%E9%9B%86%E5%90%88%E4%BD%93%E7%B3%BB%E6%A2%B3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>本文简单梳理了Java集合体系知识，重点分析了Set、Map集合的数据存储原理。</p><hr><h2 id="一、集合与数组的区别"><a href="#一、集合与数组的区别" class="headerlink" title="一、集合与数组的区别"></a>一、集合与数组的区别</h2><blockquote><ol><li>相同点<ul><li>都是容器，可以存储多个数据</li><li>都可以存储引用类型的数据</li></ul></li><li>区别<ul><li><strong>数组长度不可变</strong></li><li><strong>集合长度可变</strong></li><li>数组既可以存储基本数据类型，也可以存储引用数据类型</li><li><strong>集合只能存储引用数据类型</strong>，如果要存储基本数据类型，需要将基本数据类型转换为对应的包装类进行存储</li></ul></li></ol></blockquote><h2 id="二、Collection集合体系（单列集合）"><a href="#二、Collection集合体系（单列集合）" class="headerlink" title="二、Collection集合体系（单列集合）"></a>二、Collection集合体系（单列集合）</h2><p>1）、Collection接口有两个子接口：<strong>List</strong>接口 和 <strong>Set</strong>接口</p><p>2）、Collection集合体系结构图（概）：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202208171249734.png" alt="image-20220817124929677"></p><h3 id="1、List接口"><a href="#1、List接口" class="headerlink" title="1、List接口"></a>1、List接口</h3><h4 id="1）、List接口特点："><a href="#1）、List接口特点：" class="headerlink" title="1）、List接口特点："></a>1）、List接口特点：</h4><ul><li>有序的：保证存入和取出的元素的顺序一致</li><li>有索引的：可以通过索引去操作集合内元素</li><li>可重复的：集合内的元素可重复</li></ul><h4 id="2）、ArrayList集合"><a href="#2）、ArrayList集合" class="headerlink" title="2）、ArrayList集合"></a>2）、ArrayList集合</h4><p>ArrayList特点：</p><ul><li>底层数据结构：数组</li><li>查询快：元素有索引，元素内存空间连续</li><li>增删慢：因为底层数据结构是数组，那么数组的长度是不可变的，如需增删元素，需要频繁的创建新数组、拷贝元素和销毁旧数组</li><li>线程不同步，不安全，效率高</li></ul><h4 id="3）、Vector集合"><a href="#3）、Vector集合" class="headerlink" title="3）、Vector集合"></a>3）、Vector集合</h4><p>Vector特点：</p><ul><li>底层数据结构：数组</li><li>查询快</li><li>增删慢</li><li>线程同步，安全，效率低</li></ul><h4 id="4）、LinkedList集合"><a href="#4）、LinkedList集合" class="headerlink" title="4）、LinkedList集合"></a>4）、LinkedList集合</h4><p>LinkedList特点：</p><ul><li>底层数据结构：双向链表</li><li>增删快：链表结构修改元素对应节点地址就可实现增删</li><li>查询慢：链表结构只能从前往后查，或从后向前查（要查询节点编号 &lt; 节点数 &#x2F; 2：从前往后查询；要查询节点编号 &gt; 节点数 &#x2F; 2：从后往前查询）</li><li>线程不同步，不安全，效率高</li></ul><h3 id="2、Set接口"><a href="#2、Set接口" class="headerlink" title="2、Set接口"></a>2、Set接口</h3><h4 id="1）、Set接口特点"><a href="#1）、Set接口特点" class="headerlink" title="1）、Set接口特点"></a>1）、Set接口特点</h4><blockquote><p>注意：Set接口的实现类集合有无序的和有序的，并不是所有Set集合都是无序的</p><p>有序的Set集合：LinkedHashSet<E></p><p>无序的Set集合：HashSet<E></p></blockquote><ul><li>无索引的：不可以通过索引去操作集合中的元素</li><li>不可重复：集合内的元素不允许重复存储（元素唯一）</li></ul><h4 id="2）、红黑树简单介绍"><a href="#2）、红黑树简单介绍" class="headerlink" title="2）、红黑树简单介绍"></a>2）、红黑树简单介绍</h4><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202208171313937.png" alt="image-20220817131309881"></p><ol><li>作用：红黑树可以通过红色节点和黑色节点尽可能的保证二叉树的平衡，从而提高效率</li><li>红黑树的约束：<ul><li>节点可以是红色的或者黑色的</li><li>根节点是黑色的</li><li>叶子节点（特指空节点）是黑色的</li><li>每个红色节点的子节点都是黑色的</li><li>任何一个节点到其每一个叶子节点的所有路径上的黑色节点数相同</li></ul></li><li>保证最大路径不超过最小路径的2倍，来尽量保证红黑树的平衡</li></ol><h4 id="3）、哈希表（JDK1-8后增加了红黑树）"><a href="#3）、哈希表（JDK1-8后增加了红黑树）" class="headerlink" title="3）、哈希表（JDK1.8后增加了红黑树）"></a>3）、哈希表（JDK1.8后增加了红黑树）</h4><ol><li>哈希表底层采用数组+链表+红黑树实现，当链表长度超过阈值（8）并且数组元素数量 &gt;&#x3D; 64 时，将链表转换为红黑树</li><li>哈希表的初始化容量是16（数组长度16）：当数组容量不够时，扩容为原数组长度的2倍</li><li>哈希表的加载因子为0.75：当数组的容量被使用了 75%后，进行数组扩容</li></ol><h4 id="4）、Set集合存储数据原理"><a href="#4）、Set集合存储数据原理" class="headerlink" title="4）、Set集合存储数据原理"></a>4）、Set集合存储数据原理</h4><blockquote><p>​Set集合存储自定义元素想要保证元素唯一，存储的自定义元素必须重写hashCode和equals方法</p></blockquote><ol><li>使用当前存储的元素调用hashCode方法，计算哈希值</li><li>使用哈希值计算该元素在数组中存储的索引值<ul><li>简单理解：哈希值 % 数组长度</li><li>底层优化算法：哈希值 &amp; （数组长度 - 1）</li></ul></li><li>检查数组当前索引下是否存在元素</li><li>如果不存在直接存储</li><li>如果存在<ul><li>使用当前存储的元素调用equals方法和数组当前索引上已经存储的每个元素比较</li><li>如果存在相同的元素，结束遍历，返回相同的元素节点，map.put方法会判断是否是null，不是就返回flase</li><li>如果不存在相同的元素，存储到当前索引下链表尾节点</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、在add存储元素时，其实底层使用的是map.put方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<span class="hljs-comment">//这里返回的是boolean值</span><br>    <span class="hljs-comment">// PRESENT是一个新建对象地址，它的源码：private static final Object PRESENT = new Object();</span><br>    <span class="hljs-keyword">return</span> map.put(e, PRESENT)==<span class="hljs-literal">null</span>;<span class="hljs-comment">//最后这里判断的是，Set集合中是否存在该元素，如果==null，返回ture，该元素存入Set集合</span><br>&#125;<br><br><span class="hljs-comment">//2、map.put()方法源码：</span><br><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<span class="hljs-comment">//key是传入的对象元素，value是传入的新建的对象地址值</span><br>    <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>&#125;<br><span class="hljs-comment">//2.1、hash(key)方法源码：</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-type">int</span> h;<br>    <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>    <span class="hljs-comment">//只要传入的对象元素不为空，那么用(h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)(对哈希值的位运算)算出一个int值，这里面的key.hashCode()方法key没重写就调Object的，重写了就调自己的</span><br>&#125;<br><span class="hljs-comment">//2.1.1、如果存储的元素中没有重写hashCode方法，那么会调用Object的hashCode方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span>;<span class="hljs-comment">//该方法是本地方法，根据系统资源计算一个int数字，叫做哈希值，只要new创建对象，获取到的哈希值就是不同的（哪怕内容相同）</span><br><span class="hljs-comment">//-------------------------------------------</span><br><span class="hljs-comment">//2.1.2、如果存储的元素重写了hashCode方法，如：</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Objects.hash(name, age);<span class="hljs-comment">//name和age是该类成员属性</span><br>    <span class="hljs-comment">//注意：这里的age是int类型，当调用hash方法时，age自动转换成Integer包装类对象</span><br>&#125;<br><span class="hljs-comment">//2.1.3、Objects.hash()方法源码：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object... values)</span> &#123; <span class="hljs-comment">//这里用了可变参数</span><br>    <span class="hljs-keyword">return</span> Arrays.hashCode(values);<span class="hljs-comment">//可变参数传入的是一个数组</span><br>&#125;<br><span class="hljs-comment">//2.1.4、Arrays.hashCode()方法源码：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">(Object a[])</span> &#123;<span class="hljs-comment">//数组里面是类的成员属性</span><br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-literal">null</span>)<span class="hljs-comment">//判断是否为空，为空返回0</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//最后返回的值，也就是哈希值</span><br>    <span class="hljs-keyword">for</span> (Object element : a)<span class="hljs-comment">//增强for遍历数组</span><br>        <span class="hljs-comment">//这里就是重写hashCode后计算当前元素的哈希值的算法</span><br>        <span class="hljs-comment">//31 * result + (element == null ? 0 : element.hashCode())</span><br>        result = <span class="hljs-number">31</span> * result + (element == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : element.hashCode());<span class="hljs-comment">//这里的element.hashCode()调用的是成员属性的hashCode方法（这里可以再追成员属性的哈希值）</span><br>    <span class="hljs-keyword">return</span> result;<span class="hljs-comment">//返回哈希值</span><br>&#125;<br><br><span class="hljs-comment">//3、putVal(hash(key), key, value, false, true)方法源码：</span><br><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,</span><br><span class="hljs-params">               <span class="hljs-type">boolean</span> evict)</span> &#123;<br>    <span class="hljs-comment">//int hash：进行其他运算后的得到的一个int值</span><br>    <span class="hljs-comment">//key：要存储的对象元素</span><br>    <span class="hljs-comment">//value：new的Object类对象</span><br>    <span class="hljs-comment">//boolean onlyIfAbsent：false</span><br>    <span class="hljs-comment">//boolean evict：true</span><br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, i;<br>    <span class="hljs-comment">//n是tab链表数组长度</span><br>    <span class="hljs-comment">//i是索引</span><br>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<span class="hljs-comment">//如果tab和table链表数组等于null 或者tab链表数组长度为0</span><br>        n = (tab = resize()).length;<span class="hljs-comment">//resize()方法创建了初始容量16的链表数组空间  //这里tab指向这个空间  //n就是数组长度</span><br>    <span class="hljs-comment">//这里就是计算出对象元素要存储在数组的哪个索引值的公式：i = (n - 1) &amp; hash //注意：这里的n跟随数组的扩容而改变16，32，64......</span><br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)<span class="hljs-comment">//如果该索引处没有链表存在</span><br>        <span class="hljs-comment">// 在i索引处添加链表，存储对象元素为首节点</span><br>        tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//如果该索引处存在链表</span><br>        Node&lt;K,V&gt; e; K k;<br>        <span class="hljs-comment">//p是数组索引为i的链表的地址</span><br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>            ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<span class="hljs-comment">//判断与首节点元素是否相同</span><br>            e = p;<span class="hljs-comment">//相同：e保存当前节点</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode) <span class="hljs-comment">//判断是否是红黑树，太复杂，略过</span><br>            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);<br>        <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//与首节点元素不同</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123;<span class="hljs-comment">//遍历链表</span><br>                <span class="hljs-comment">//如果当前节点的next地址为空(第一次判断的是首节点的next地址)</span><br>                <span class="hljs-comment">//true：e = null</span><br>                <span class="hljs-comment">//flase：e = 下一节点地址</span><br>                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">//创建节点，将新创建节点地址连接到当前节点next上</span><br>                    p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>                    <span class="hljs-comment">//判断当前链表是否超过阈值</span><br>                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                        treeifyBin(tab, hash);<br>                    <span class="hljs-comment">//结束循环</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-comment">//判断和当前节点的下一节点元素是否相同</span><br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                    ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-comment">//相同就结束循环</span><br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-comment">//链表节点位移（每遍历一次，指针向后移动一个节点）</span><br>                p = e;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;<span class="hljs-comment">//保存相同节点中的value</span><br>            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>)<br>                e.value = value;<span class="hljs-comment">//value一样</span><br>            afterNodeAccess(e);<span class="hljs-comment">//不知道干嘛的</span><br>            <span class="hljs-keyword">return</span> oldValue;<span class="hljs-comment">//返回相同节点的value</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//扩容机制</span><br>    ++modCount;<br>    <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>        resize();<br>    afterNodeInsertion(evict);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-comment">//4、返回结果</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123; <span class="hljs-comment">//这里返回的是true和flase</span><br>    <span class="hljs-comment">//如果put方法返回的值为null，代表元素已经存储</span><br>    <span class="hljs-comment">//如果put方法返回的值不为null，代表存在相同元素，不存储</span><br>    <span class="hljs-keyword">return</span> map.put(e, PRESENT)==<span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5）、HashSet集合"><a href="#5）、HashSet集合" class="headerlink" title="5）、HashSet集合"></a>5）、HashSet集合</h4><p>特点：</p><ul><li>底层数据结构：哈希表（数组 + 单向链表 &#x2F; 红黑树 [链表节点 &gt; 8 并且 数组元素数量 &gt;&#x3D; 64，链表会变为红黑树结构]）</li><li>查询快</li><li>增删快</li><li><strong>无序</strong>：不保证元素的迭代顺序，存储元素的顺序和取出元素的顺序不一致</li><li>无索引</li><li>不可重复：不允许存在相同元素</li><li>线程不安全，不同步，效率高</li><li>存储在此集合中的元素应该重写hashCode和equals方法保证唯一性</li></ul><h4 id="6）、LinkedHashSet集合"><a href="#6）、LinkedHashSet集合" class="headerlink" title="6）、LinkedHashSet集合"></a>6）、LinkedHashSet集合</h4><p>特点：</p><ul><li>底层数据结构：哈希表 + 链表 （数组 + 双向链表 &#x2F; 红黑树 [链表节点 &gt; 8 并且 数组元素数量 &gt;&#x3D; 64，链表变为红黑树]）</li><li>查询快</li><li>增删快</li><li><strong>有序</strong></li><li>无索引</li><li>不可重复</li></ul><h2 id="三、Map集合体系（双列集合）"><a href="#三、Map集合体系（双列集合）" class="headerlink" title="三、Map集合体系（双列集合）"></a>三、Map集合体系（双列集合）</h2><h3 id="Map-lt-K-V-gt-接口："><a href="#Map-lt-K-V-gt-接口：" class="headerlink" title="Map&lt;K,V&gt;接口："></a>Map&lt;K,V&gt;接口：</h3><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202208172031321.png" alt="image-20220817203110253"></p><p>特点：</p><ul><li>键唯一，值可以重复</li><li>一个键对应一个值（键值对关系 &#x2F; 映射关系）</li><li>依靠键维护键值对关系（可以通过键获取到值，但不能通过值获取键）</li></ul><h4 id="1、Map-lt-K-V-gt-接口的常用实现类："><a href="#1、Map-lt-K-V-gt-接口的常用实现类：" class="headerlink" title="1、Map&lt;K,V&gt;接口的常用实现类："></a>1、Map&lt;K,V&gt;接口的常用实现类：</h4><ul><li>HashMap&lt;K,V&gt;：线程不同步，不安全，效率高</li><li>Hashtable&lt;K,V&gt;：线程同步，安全，效率低</li><li>LinkedHashMap&lt;K,V&gt;：线程不同步，不安全，效率高</li></ul><h4 id="2、HashMap-lt-K-V-gt-集合"><a href="#2、HashMap-lt-K-V-gt-集合" class="headerlink" title="2、HashMap&lt;K,V&gt;集合"></a>2、HashMap&lt;K,V&gt;集合</h4><p>1）、特点</p><ol><li>键具备哈希特性：哈希表（数组 + 单向链表 &#x2F; 红黑树）</li><li>查询速度非常快，增删速度也快</li><li>键唯一：键所属的类要重写hashCode和equals方法</li><li>键无序：不保证存入和取出的顺序一致</li><li>键无索引：不能通过索引的方式获取键</li><li>允许存储 null键 和 null值</li><li>线程不同步，不安全，效率高</li></ol><h4 id="3、Hashtable-lt-K-V-gt-集合"><a href="#3、Hashtable-lt-K-V-gt-集合" class="headerlink" title="3、Hashtable&lt;K,V&gt;集合"></a>3、Hashtable&lt;K,V&gt;集合</h4><p>1）、特点</p><ol><li>键具备哈希特性：哈希表（数组 + 单向链表）</li><li>查询速度非常快，增删速度也快</li><li>键唯一：键所属的类要重写hashCode和equals方法</li><li>键无序：不保证存入和取出的顺序一致</li><li>键无索引：不能通过索引的方式获取键</li><li>不允许存储 null键 和 null值</li><li>线程同步，安全，效率低</li></ol><h4 id="4、LinkedHashMap-lt-K-V-gt-集合"><a href="#4、LinkedHashMap-lt-K-V-gt-集合" class="headerlink" title="4、LinkedHashMap&lt;K,V&gt;集合"></a>4、LinkedHashMap&lt;K,V&gt;集合</h4><p>1）、特点</p><ol><li>键具备哈希特性 和 链表特性：哈希表（数组 + 双向链表）</li><li>查询速度非常快，增删速度也快</li><li>哈希特性保证键唯一：键所属的类要重写hashCode和equals方法</li><li>链表特性保证键有序：保证存入和取出的顺序一致</li><li>键无索引：不能通过索引的方式获取键</li><li>不允许存储 null键 和 null值</li><li>线程不同步，不安全，效率高</li></ol><h4 id="5、Properties集合（属性集）"><a href="#5、Properties集合（属性集）" class="headerlink" title="5、Properties集合（属性集）"></a>5、Properties集合（属性集）</h4><p>1）、Properties集合是Hashtable的子类</p><p>2）、数据存储格式: 属性名&#x3D;属性值 如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">name</span>=<span class="hljs-string">zhangsan</span><br><span class="hljs-attr">age</span>=<span class="hljs-string">18</span><br></code></pre></td></tr></table></figure><p>3）、可以存储在properties文件中</p><p>4）、特点：</p><ul><li>Properties也是Map集合的实现类,Map集合中定义的方法,它都有</li><li>Hashtable是Map接口的实现类,具有泛型K代表键的类型,V代表值的类型；但是Properties继承Hashtable时,确定键的类型Object以及值的类型Object； 所以创建Properties集合对象时,不能再指定泛型</li><li>Properties集合提供了参数和返回值都是String的方法,而String后期可以写在文件中</li><li>Properties集合是唯一一个和IO流配合使用的双列集合</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
