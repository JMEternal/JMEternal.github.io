<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>application.yml常用配置</title>
    <link href="/2022/09/23/application.yml%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/09/23/application.yml%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p>resources目录下application.yml文件常用配置</p>          </div><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 设置端口</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>  <span class="hljs-comment">#应用名称 , 可选</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">reggie_take_out</span><br>  <span class="hljs-comment"># 数据库连接</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">druid:</span><br>      <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/reggie?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br><span class="hljs-comment"># mybatis-plus</span><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-comment">#在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，按照驼峰命名法映射 address_book ---&gt; AddressBook</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment">#日志输出</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br>  <span class="hljs-comment"># 全局配置</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>    <span class="hljs-comment">#设置ID自增类型 默认雪花算法</span><br>      <span class="hljs-attr">id-type:</span> <span class="hljs-string">ASSIGN_ID</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置文件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pom文件常用配置</title>
    <link href="/2022/09/23/pom.xml%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/09/23/pom.xml%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h3><div class="note note-primary">            <p>pom.xml</p>          </div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>reggie_take_out<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Spring Boot 的父级依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository  从存储库中查找父级 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--Spring Boot起步依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--test测试--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--Web 场景启动器--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--MybatisPlus起步依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--lombok--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--用于java后台处理json格式数据工具包--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.76<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--java.lang的扩展,commons中最常用的工具包--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-lang<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--mysql--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--Druid官方用来简化SpringBoot配置的starter--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--maven插件 为Spring Boot应用提供了执行Maven的操作--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>配置文件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown文章标签</title>
    <link href="/2022/08/18/%E6%A0%BC%E5%BC%8F/"/>
    <url>/2022/08/18/%E6%A0%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h4 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h4><div class="note note-primary">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><div class="note note-secondary">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><div class="note note-success">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><div class="note note-danger">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><div class="note note-warning">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><div class="note note-info">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><div class="note note-light">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><h4 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h4><span class="label label-primary">text</span><span class="label label-default">text</span><span class="label label-info">text</span><span class="label label-success">text</span><span class="label label-warning">text</span><span class="label label-danger">text</span>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tag</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集合体系梳理</title>
    <link href="/2022/08/17/%E9%9B%86%E5%90%88%E4%BD%93%E7%B3%BB%E6%A2%B3%E7%90%86/"/>
    <url>/2022/08/17/%E9%9B%86%E5%90%88%E4%BD%93%E7%B3%BB%E6%A2%B3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>本文简单梳理了Java集合体系知识，重点分析了Set、Map集合的数据存储原理。</p><hr><h2 id="一、集合与数组的区别"><a href="#一、集合与数组的区别" class="headerlink" title="一、集合与数组的区别"></a>一、集合与数组的区别</h2><blockquote><ol><li>相同点<ul><li>都是容器，可以存储多个数据</li><li>都可以存储引用类型的数据</li></ul></li><li>区别<ul><li><strong>数组长度不可变</strong></li><li><strong>集合长度可变</strong></li><li>数组既可以存储基本数据类型，也可以存储引用数据类型</li><li><strong>集合只能存储引用数据类型</strong>，如果要存储基本数据类型，需要将基本数据类型转换为对应的包装类进行存储</li></ul></li></ol></blockquote><h2 id="二、Collection集合体系（单列集合）"><a href="#二、Collection集合体系（单列集合）" class="headerlink" title="二、Collection集合体系（单列集合）"></a>二、Collection集合体系（单列集合）</h2><p>1）、Collection接口有两个子接口：<strong>List</strong>接口 和 <strong>Set</strong>接口</p><p>2）、Collection集合体系结构图（概）：</p><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202208171249734.png" alt="image-20220817124929677"></p><h3 id="1、List接口"><a href="#1、List接口" class="headerlink" title="1、List接口"></a>1、List接口</h3><h4 id="1）、List接口特点："><a href="#1）、List接口特点：" class="headerlink" title="1）、List接口特点："></a>1）、List接口特点：</h4><ul><li>有序的：保证存入和取出的元素的顺序一致</li><li>有索引的：可以通过索引去操作集合内元素</li><li>可重复的：集合内的元素可重复</li></ul><h4 id="2）、ArrayList集合"><a href="#2）、ArrayList集合" class="headerlink" title="2）、ArrayList集合"></a>2）、ArrayList集合</h4><p>ArrayList特点：</p><ul><li>底层数据结构：数组</li><li>查询快：元素有索引，元素内存空间连续</li><li>增删慢：因为底层数据结构是数组，那么数组的长度是不可变的，如需增删元素，需要频繁的创建新数组、拷贝元素和销毁旧数组</li><li>线程不同步，不安全，效率高</li></ul><h4 id="3）、Vector集合"><a href="#3）、Vector集合" class="headerlink" title="3）、Vector集合"></a>3）、Vector集合</h4><p>Vector特点：</p><ul><li>底层数据结构：数组</li><li>查询快</li><li>增删慢</li><li>线程同步，安全，效率低</li></ul><h4 id="4）、LinkedList集合"><a href="#4）、LinkedList集合" class="headerlink" title="4）、LinkedList集合"></a>4）、LinkedList集合</h4><p>LinkedList特点：</p><ul><li>底层数据结构：双向链表</li><li>增删快：链表结构修改元素对应节点地址就可实现增删</li><li>查询慢：链表结构只能从前往后查，或从后向前查（要查询节点编号 &lt; 节点数 &#x2F; 2：从前往后查询；要查询节点编号 &gt; 节点数 &#x2F; 2：从后往前查询）</li><li>线程不同步，不安全，效率高</li></ul><h3 id="2、Set接口"><a href="#2、Set接口" class="headerlink" title="2、Set接口"></a>2、Set接口</h3><h4 id="1）、Set接口特点"><a href="#1）、Set接口特点" class="headerlink" title="1）、Set接口特点"></a>1）、Set接口特点</h4><blockquote><p>注意：Set接口的实现类集合有无序的和有序的，并不是所有Set集合都是无序的</p><p>有序的Set集合：LinkedHashSet<E></p><p>无序的Set集合：HashSet<E></p></blockquote><ul><li>无索引的：不可以通过索引去操作集合中的元素</li><li>不可重复：集合内的元素不允许重复存储（元素唯一）</li></ul><h4 id="2）、红黑树简单介绍"><a href="#2）、红黑树简单介绍" class="headerlink" title="2）、红黑树简单介绍"></a>2）、红黑树简单介绍</h4><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202208171313937.png" alt="image-20220817131309881"></p><ol><li>作用：红黑树可以通过红色节点和黑色节点尽可能的保证二叉树的平衡，从而提高效率</li><li>红黑树的约束：<ul><li>节点可以是红色的或者黑色的</li><li>根节点是黑色的</li><li>叶子节点（特指空节点）是黑色的</li><li>每个红色节点的子节点都是黑色的</li><li>任何一个节点到其每一个叶子节点的所有路径上的黑色节点数相同</li></ul></li><li>保证最大路径不超过最小路径的2倍，来尽量保证红黑树的平衡</li></ol><h4 id="3）、哈希表（JDK1-8后增加了红黑树）"><a href="#3）、哈希表（JDK1-8后增加了红黑树）" class="headerlink" title="3）、哈希表（JDK1.8后增加了红黑树）"></a>3）、哈希表（JDK1.8后增加了红黑树）</h4><ol><li>哈希表底层采用数组+链表+红黑树实现，当链表长度超过阈值（8）并且数组元素数量 &gt;&#x3D; 64 时，将链表转换为红黑树</li><li>哈希表的初始化容量是16（数组长度16）：当数组容量不够时，扩容为原数组长度的2倍</li><li>哈希表的加载因子为0.75：当数组的容量被使用了 75%后，进行数组扩容</li></ol><h4 id="4）、Set集合存储数据原理"><a href="#4）、Set集合存储数据原理" class="headerlink" title="4）、Set集合存储数据原理"></a>4）、Set集合存储数据原理</h4><blockquote><p>​Set集合存储自定义元素想要保证元素唯一，存储的自定义元素必须重写hashCode和equals方法</p></blockquote><ol><li>使用当前存储的元素调用hashCode方法，计算哈希值</li><li>使用哈希值计算该元素在数组中存储的索引值<ul><li>简单理解：哈希值 % 数组长度</li><li>底层优化算法：哈希值 &amp; （数组长度 - 1）</li></ul></li><li>检查数组当前索引下是否存在元素</li><li>如果不存在直接存储</li><li>如果存在<ul><li>使用当前存储的元素调用equals方法和数组当前索引上已经存储的每个元素比较</li><li>如果存在相同的元素，结束遍历，返回相同的元素节点，map.put方法会判断是否是null，不是就返回flase</li><li>如果不存在相同的元素，存储到当前索引下链表尾节点</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、在add存储元素时，其实底层使用的是map.put方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<span class="hljs-comment">//这里返回的是boolean值</span><br>    <span class="hljs-comment">// PRESENT是一个新建对象地址，它的源码：private static final Object PRESENT = new Object();</span><br>    <span class="hljs-keyword">return</span> map.put(e, PRESENT)==<span class="hljs-literal">null</span>;<span class="hljs-comment">//最后这里判断的是，Set集合中是否存在该元素，如果==null，返回ture，该元素存入Set集合</span><br>&#125;<br><br><span class="hljs-comment">//2、map.put()方法源码：</span><br><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<span class="hljs-comment">//key是传入的对象元素，value是传入的新建的对象地址值</span><br>    <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>&#125;<br><span class="hljs-comment">//2.1、hash(key)方法源码：</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-type">int</span> h;<br>    <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>    <span class="hljs-comment">//只要传入的对象元素不为空，那么用(h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)(对哈希值的位运算)算出一个int值，这里面的key.hashCode()方法key没重写就调Object的，重写了就调自己的</span><br>&#125;<br><span class="hljs-comment">//2.1.1、如果存储的元素中没有重写hashCode方法，那么会调用Object的hashCode方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span>;<span class="hljs-comment">//该方法是本地方法，根据系统资源计算一个int数字，叫做哈希值，只要new创建对象，获取到的哈希值就是不同的（哪怕内容相同）</span><br><span class="hljs-comment">//-------------------------------------------</span><br><span class="hljs-comment">//2.1.2、如果存储的元素重写了hashCode方法，如：</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Objects.hash(name, age);<span class="hljs-comment">//name和age是该类成员属性</span><br>    <span class="hljs-comment">//注意：这里的age是int类型，当调用hash方法时，age自动转换成Integer包装类对象</span><br>&#125;<br><span class="hljs-comment">//2.1.3、Objects.hash()方法源码：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object... values)</span> &#123; <span class="hljs-comment">//这里用了可变参数</span><br>    <span class="hljs-keyword">return</span> Arrays.hashCode(values);<span class="hljs-comment">//可变参数传入的是一个数组</span><br>&#125;<br><span class="hljs-comment">//2.1.4、Arrays.hashCode()方法源码：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">(Object a[])</span> &#123;<span class="hljs-comment">//数组里面是类的成员属性</span><br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-literal">null</span>)<span class="hljs-comment">//判断是否为空，为空返回0</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//最后返回的值，也就是哈希值</span><br>    <span class="hljs-keyword">for</span> (Object element : a)<span class="hljs-comment">//增强for遍历数组</span><br>        <span class="hljs-comment">//这里就是重写hashCode后计算当前元素的哈希值的算法</span><br>        <span class="hljs-comment">//31 * result + (element == null ? 0 : element.hashCode())</span><br>        result = <span class="hljs-number">31</span> * result + (element == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : element.hashCode());<span class="hljs-comment">//这里的element.hashCode()调用的是成员属性的hashCode方法（这里可以再追成员属性的哈希值）</span><br>    <span class="hljs-keyword">return</span> result;<span class="hljs-comment">//返回哈希值</span><br>&#125;<br><br><span class="hljs-comment">//3、putVal(hash(key), key, value, false, true)方法源码：</span><br><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,</span><br><span class="hljs-params">               <span class="hljs-type">boolean</span> evict)</span> &#123;<br>    <span class="hljs-comment">//int hash：进行其他运算后的得到的一个int值</span><br>    <span class="hljs-comment">//key：要存储的对象元素</span><br>    <span class="hljs-comment">//value：new的Object类对象</span><br>    <span class="hljs-comment">//boolean onlyIfAbsent：false</span><br>    <span class="hljs-comment">//boolean evict：true</span><br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, i;<br>    <span class="hljs-comment">//n是tab链表数组长度</span><br>    <span class="hljs-comment">//i是索引</span><br>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<span class="hljs-comment">//如果tab和table链表数组等于null 或者tab链表数组长度为0</span><br>        n = (tab = resize()).length;<span class="hljs-comment">//resize()方法创建了初始容量16的链表数组空间  //这里tab指向这个空间  //n就是数组长度</span><br>    <span class="hljs-comment">//这里就是计算出对象元素要存储在数组的哪个索引值的公式：i = (n - 1) &amp; hash //注意：这里的n跟随数组的扩容而改变16，32，64......</span><br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)<span class="hljs-comment">//如果该索引处没有链表存在</span><br>        <span class="hljs-comment">// 在i索引处添加链表，存储对象元素为首节点</span><br>        tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//如果该索引处存在链表</span><br>        Node&lt;K,V&gt; e; K k;<br>        <span class="hljs-comment">//p是数组索引为i的链表的地址</span><br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>            ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<span class="hljs-comment">//判断与首节点元素是否相同</span><br>            e = p;<span class="hljs-comment">//相同：e保存当前节点</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode) <span class="hljs-comment">//判断是否是红黑树，太复杂，略过</span><br>            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);<br>        <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//与首节点元素不同</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123;<span class="hljs-comment">//遍历链表</span><br>                <span class="hljs-comment">//如果当前节点的next地址为空(第一次判断的是首节点的next地址)</span><br>                <span class="hljs-comment">//true：e = null</span><br>                <span class="hljs-comment">//flase：e = 下一节点地址</span><br>                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">//创建节点，将新创建节点地址连接到当前节点next上</span><br>                    p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>                    <span class="hljs-comment">//判断当前链表是否超过阈值</span><br>                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                        treeifyBin(tab, hash);<br>                    <span class="hljs-comment">//结束循环</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-comment">//判断和当前节点的下一节点元素是否相同</span><br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                    ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-comment">//相同就结束循环</span><br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-comment">//链表节点位移（每遍历一次，指针向后移动一个节点）</span><br>                p = e;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;<span class="hljs-comment">//保存相同节点中的value</span><br>            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>)<br>                e.value = value;<span class="hljs-comment">//value一样</span><br>            afterNodeAccess(e);<span class="hljs-comment">//不知道干嘛的</span><br>            <span class="hljs-keyword">return</span> oldValue;<span class="hljs-comment">//返回相同节点的value</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//扩容机制</span><br>    ++modCount;<br>    <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>        resize();<br>    afterNodeInsertion(evict);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-comment">//4、返回结果</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123; <span class="hljs-comment">//这里返回的是true和flase</span><br>    <span class="hljs-comment">//如果put方法返回的值为null，代表元素已经存储</span><br>    <span class="hljs-comment">//如果put方法返回的值不为null，代表存在相同元素，不存储</span><br>    <span class="hljs-keyword">return</span> map.put(e, PRESENT)==<span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5）、HashSet集合"><a href="#5）、HashSet集合" class="headerlink" title="5）、HashSet集合"></a>5）、HashSet集合</h4><p>特点：</p><ul><li>底层数据结构：哈希表（数组 + 单向链表 &#x2F; 红黑树 [链表节点 &gt; 8 并且 数组元素数量 &gt;&#x3D; 64，链表会变为红黑树结构]）</li><li>查询快</li><li>增删快</li><li><strong>无序</strong>：不保证元素的迭代顺序，存储元素的顺序和取出元素的顺序不一致</li><li>无索引</li><li>不可重复：不允许存在相同元素</li><li>线程不安全，不同步，效率高</li><li>存储在此集合中的元素应该重写hashCode和equals方法保证唯一性</li></ul><h4 id="6）、LinkedHashSet集合"><a href="#6）、LinkedHashSet集合" class="headerlink" title="6）、LinkedHashSet集合"></a>6）、LinkedHashSet集合</h4><p>特点：</p><ul><li>底层数据结构：哈希表 + 链表 （数组 + 双向链表 &#x2F; 红黑树 [链表节点 &gt; 8 并且 数组元素数量 &gt;&#x3D; 64，链表变为红黑树]）</li><li>查询快</li><li>增删快</li><li><strong>有序</strong></li><li>无索引</li><li>不可重复</li></ul><h2 id="三、Map集合体系（双列集合）"><a href="#三、Map集合体系（双列集合）" class="headerlink" title="三、Map集合体系（双列集合）"></a>三、Map集合体系（双列集合）</h2><h3 id="Map-lt-K-V-gt-接口："><a href="#Map-lt-K-V-gt-接口：" class="headerlink" title="Map&lt;K,V&gt;接口："></a>Map&lt;K,V&gt;接口：</h3><p><img src="https://cnblog-img-jn.oss-cn-beijing.aliyuncs.com/img/202208172031321.png" alt="image-20220817203110253"></p><p>特点：</p><ul><li>键唯一，值可以重复</li><li>一个键对应一个值（键值对关系 &#x2F; 映射关系）</li><li>依靠键维护键值对关系（可以通过键获取到值，但不能通过值获取键）</li></ul><h4 id="1、Map-lt-K-V-gt-接口的常用实现类："><a href="#1、Map-lt-K-V-gt-接口的常用实现类：" class="headerlink" title="1、Map&lt;K,V&gt;接口的常用实现类："></a>1、Map&lt;K,V&gt;接口的常用实现类：</h4><ul><li>HashMap&lt;K,V&gt;：线程不同步，不安全，效率高</li><li>Hashtable&lt;K,V&gt;：线程同步，安全，效率低</li><li>LinkedHashMap&lt;K,V&gt;：线程不同步，不安全，效率高</li></ul><h4 id="2、HashMap-lt-K-V-gt-集合"><a href="#2、HashMap-lt-K-V-gt-集合" class="headerlink" title="2、HashMap&lt;K,V&gt;集合"></a>2、HashMap&lt;K,V&gt;集合</h4><p>1）、特点</p><ol><li>键具备哈希特性：哈希表（数组 + 单向链表 &#x2F; 红黑树）</li><li>查询速度非常快，增删速度也快</li><li>键唯一：键所属的类要重写hashCode和equals方法</li><li>键无序：不保证存入和取出的顺序一致</li><li>键无索引：不能通过索引的方式获取键</li><li>允许存储 null键 和 null值</li><li>线程不同步，不安全，效率高</li></ol><h4 id="3、Hashtable-lt-K-V-gt-集合"><a href="#3、Hashtable-lt-K-V-gt-集合" class="headerlink" title="3、Hashtable&lt;K,V&gt;集合"></a>3、Hashtable&lt;K,V&gt;集合</h4><p>1）、特点</p><ol><li>键具备哈希特性：哈希表（数组 + 单向链表）</li><li>查询速度非常快，增删速度也快</li><li>键唯一：键所属的类要重写hashCode和equals方法</li><li>键无序：不保证存入和取出的顺序一致</li><li>键无索引：不能通过索引的方式获取键</li><li>不允许存储 null键 和 null值</li><li>线程同步，安全，效率低</li></ol><h4 id="4、LinkedHashMap-lt-K-V-gt-集合"><a href="#4、LinkedHashMap-lt-K-V-gt-集合" class="headerlink" title="4、LinkedHashMap&lt;K,V&gt;集合"></a>4、LinkedHashMap&lt;K,V&gt;集合</h4><p>1）、特点</p><ol><li>键具备哈希特性 和 链表特性：哈希表（数组 + 双向链表）</li><li>查询速度非常快，增删速度也快</li><li>哈希特性保证键唯一：键所属的类要重写hashCode和equals方法</li><li>链表特性保证键有序：保证存入和取出的顺序一致</li><li>键无索引：不能通过索引的方式获取键</li><li>不允许存储 null键 和 null值</li><li>线程不同步，不安全，效率高</li></ol><h4 id="5、Properties集合（属性集）"><a href="#5、Properties集合（属性集）" class="headerlink" title="5、Properties集合（属性集）"></a>5、Properties集合（属性集）</h4><p>1）、Properties集合是Hashtable的子类</p><p>2）、数据存储格式: 属性名&#x3D;属性值 如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">name</span>=<span class="hljs-string">zhangsan</span><br><span class="hljs-attr">age</span>=<span class="hljs-string">18</span><br></code></pre></td></tr></table></figure><p>3）、可以存储在properties文件中</p><p>4）、特点：</p><ul><li>Properties也是Map集合的实现类,Map集合中定义的方法,它都有</li><li>Hashtable是Map接口的实现类,具有泛型K代表键的类型,V代表值的类型；但是Properties继承Hashtable时,确定键的类型Object以及值的类型Object； 所以创建Properties集合对象时,不能再指定泛型</li><li>Properties集合提供了参数和返回值都是String的方法,而String后期可以写在文件中</li><li>Properties集合是唯一一个和IO流配合使用的双列集合</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/08/15/hello-world/"/>
    <url>/2022/08/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
